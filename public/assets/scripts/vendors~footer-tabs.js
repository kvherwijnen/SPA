(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~footer-tabs"],{

/***/ "./node_modules/element-ui/lib/tabs.js":
/*!*********************************************!*\
  !*** ./node_modules/element-ui/lib/tabs.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"/dist/\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 60);\n  /******/\n}(\n/************************************************************************/\n\n/******/\n{\n  /***/\n  0:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n    /* harmony export (binding) */\n\n    __webpack_require__.d(__webpack_exports__, \"a\", function () {\n      return normalizeComponent;\n    });\n    /* globals __VUE_SSR_CONTEXT__ */\n    // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n    // This module is a runtime utility for cleaner component module output and will\n    // be included in the final webpack user bundle.\n\n\n    function normalizeComponent(scriptExports, render, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier,\n    /* server only */\n    shadowMode\n    /* vue-cli only */\n    ) {\n      // Vue.extend constructor export interop\n      var options = typeof scriptExports === 'function' ? scriptExports.options : scriptExports; // render functions\n\n      if (render) {\n        options.render = render;\n        options.staticRenderFns = staticRenderFns;\n        options._compiled = true;\n      } // functional template\n\n\n      if (functionalTemplate) {\n        options.functional = true;\n      } // scopedId\n\n\n      if (scopeId) {\n        options._scopeId = 'data-v-' + scopeId;\n      }\n\n      var hook;\n\n      if (moduleIdentifier) {\n        // server build\n        hook = function (context) {\n          // 2.3 injection\n          context = context || // cached call\n          this.$vnode && this.$vnode.ssrContext || // stateful\n          this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n          // 2.2 with runInNewContext: true\n\n          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n            context = __VUE_SSR_CONTEXT__;\n          } // inject component styles\n\n\n          if (injectStyles) {\n            injectStyles.call(this, context);\n          } // register component module identifier for async chunk inferrence\n\n\n          if (context && context._registeredComponents) {\n            context._registeredComponents.add(moduleIdentifier);\n          }\n        }; // used by ssr in case component is cached and beforeCreate\n        // never gets called\n\n\n        options._ssrRegister = hook;\n      } else if (injectStyles) {\n        hook = shadowMode ? function () {\n          injectStyles.call(this, this.$root.$options.shadowRoot);\n        } : injectStyles;\n      }\n\n      if (hook) {\n        if (options.functional) {\n          // for template-only hot-reload because in that case the render fn doesn't\n          // go through the normalizer\n          options._injectStyles = hook; // register for functioal component in vue file\n\n          var originalRender = options.render;\n\n          options.render = function renderWithStyleInjection(h, context) {\n            hook.call(context);\n            return originalRender(h, context);\n          };\n        } else {\n          // inject component registration as beforeCreate hook\n          var existing = options.beforeCreate;\n          options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n        }\n      }\n\n      return {\n        exports: scriptExports,\n        options: options\n      };\n    }\n    /***/\n\n  },\n\n  /***/\n  16:\n  /***/\n  function (module, exports) {\n    module.exports = __webpack_require__(/*! element-ui/lib/utils/resize-event */ \"./node_modules/element-ui/lib/utils/resize-event.js\");\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = __webpack_require__(/*! element-ui/lib/utils/util */ \"./node_modules/element-ui/lib/utils/util.js\");\n    /***/\n  },\n\n  /***/\n  60:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tabs/src/tab-bar.vue?vue&type=template&id=2031f33a&\n\n\n    var render = function () {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c(\"div\", {\n        staticClass: \"el-tabs__active-bar\",\n        class: \"is-\" + _vm.rootTabs.tabPosition,\n        style: _vm.barStyle\n      });\n    };\n\n    var staticRenderFns = [];\n    render._withStripped = true; // CONCATENATED MODULE: ./packages/tabs/src/tab-bar.vue?vue&type=template&id=2031f33a&\n    // EXTERNAL MODULE: external \"element-ui/lib/utils/util\"\n\n    var util_ = __webpack_require__(3); // CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tabs/src/tab-bar.vue?vue&type=script&lang=js&\n    //\n    //\n    //\n\n    /* harmony default export */\n\n\n    var tab_barvue_type_script_lang_js_ = {\n      name: 'TabBar',\n      props: {\n        tabs: Array\n      },\n      inject: ['rootTabs'],\n      computed: {\n        barStyle: {\n          get: function get() {\n            var _this = this;\n\n            var style = {};\n            var offset = 0;\n            var tabSize = 0;\n            var sizeName = ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1 ? 'width' : 'height';\n            var sizeDir = sizeName === 'width' ? 'x' : 'y';\n\n            var firstUpperCase = function firstUpperCase(str) {\n              return str.toLowerCase().replace(/( |^)[a-z]/g, function (L) {\n                return L.toUpperCase();\n              });\n            };\n\n            this.tabs.every(function (tab, index) {\n              var $el = Object(util_[\"arrayFind\"])(_this.$parent.$refs.tabs || [], function (t) {\n                return t.id.replace('tab-', '') === tab.paneName;\n              });\n\n              if (!$el) {\n                return false;\n              }\n\n              if (!tab.active) {\n                offset += $el['client' + firstUpperCase(sizeName)];\n                return true;\n              } else {\n                tabSize = $el['client' + firstUpperCase(sizeName)];\n                var tabStyles = window.getComputedStyle($el);\n\n                if (sizeName === 'width' && _this.tabs.length > 1) {\n                  tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);\n                }\n\n                if (sizeName === 'width') {\n                  offset += parseFloat(tabStyles.paddingLeft);\n                }\n\n                return false;\n              }\n            });\n            var transform = 'translate' + firstUpperCase(sizeDir) + '(' + offset + 'px)';\n            style[sizeName] = tabSize + 'px';\n            style.transform = transform;\n            style.msTransform = transform;\n            style.webkitTransform = transform;\n            return style;\n          }\n        }\n      }\n    }; // CONCATENATED MODULE: ./packages/tabs/src/tab-bar.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var src_tab_barvue_type_script_lang_js_ = tab_barvue_type_script_lang_js_; // EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n\n    var componentNormalizer = __webpack_require__(0); // CONCATENATED MODULE: ./packages/tabs/src/tab-bar.vue\n\n    /* normalize component */\n\n\n    var component = Object(componentNormalizer[\"a\"\n    /* default */\n    ])(src_tab_barvue_type_script_lang_js_, render, staticRenderFns, false, null, null, null);\n    /* hot reload */\n\n    if (false) { var api; }\n\n    component.options.__file = \"packages/tabs/src/tab-bar.vue\";\n    /* harmony default export */\n\n    var tab_bar = component.exports; // EXTERNAL MODULE: external \"element-ui/lib/utils/resize-event\"\n\n    var resize_event_ = __webpack_require__(16); // CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tabs/src/tab-nav.vue?vue&type=script&lang=js&\n\n\n    function noop() {}\n\n    var tab_navvue_type_script_lang_js_firstUpperCase = function firstUpperCase(str) {\n      return str.toLowerCase().replace(/( |^)[a-z]/g, function (L) {\n        return L.toUpperCase();\n      });\n    };\n    /* harmony default export */\n\n\n    var tab_navvue_type_script_lang_js_ = {\n      name: 'TabNav',\n      components: {\n        TabBar: tab_bar\n      },\n      inject: ['rootTabs'],\n      props: {\n        panes: Array,\n        currentName: String,\n        editable: Boolean,\n        onTabClick: {\n          type: Function,\n          default: noop\n        },\n        onTabRemove: {\n          type: Function,\n          default: noop\n        },\n        type: String,\n        stretch: Boolean\n      },\n      data: function data() {\n        return {\n          scrollable: false,\n          navOffset: 0,\n          isFocus: false,\n          focusable: true\n        };\n      },\n      computed: {\n        navStyle: function navStyle() {\n          var dir = ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1 ? 'X' : 'Y';\n          return {\n            transform: 'translate' + dir + '(-' + this.navOffset + 'px)'\n          };\n        },\n        sizeName: function sizeName() {\n          return ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1 ? 'width' : 'height';\n        }\n      },\n      methods: {\n        scrollPrev: function scrollPrev() {\n          var containerSize = this.$refs.navScroll['offset' + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];\n          var currentOffset = this.navOffset;\n          if (!currentOffset) return;\n          var newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;\n          this.navOffset = newOffset;\n        },\n        scrollNext: function scrollNext() {\n          var navSize = this.$refs.nav['offset' + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];\n          var containerSize = this.$refs.navScroll['offset' + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];\n          var currentOffset = this.navOffset;\n          if (navSize - currentOffset <= containerSize) return;\n          var newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;\n          this.navOffset = newOffset;\n        },\n        scrollToActiveTab: function scrollToActiveTab() {\n          if (!this.scrollable) return;\n          var nav = this.$refs.nav;\n          var activeTab = this.$el.querySelector('.is-active');\n          if (!activeTab) return;\n          var navScroll = this.$refs.navScroll;\n          var isHorizontal = ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1;\n          var activeTabBounding = activeTab.getBoundingClientRect();\n          var navScrollBounding = navScroll.getBoundingClientRect();\n          var maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;\n          var currentOffset = this.navOffset;\n          var newOffset = currentOffset;\n\n          if (isHorizontal) {\n            if (activeTabBounding.left < navScrollBounding.left) {\n              newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);\n            }\n\n            if (activeTabBounding.right > navScrollBounding.right) {\n              newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;\n            }\n          } else {\n            if (activeTabBounding.top < navScrollBounding.top) {\n              newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);\n            }\n\n            if (activeTabBounding.bottom > navScrollBounding.bottom) {\n              newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);\n            }\n          }\n\n          newOffset = Math.max(newOffset, 0);\n          this.navOffset = Math.min(newOffset, maxOffset);\n        },\n        update: function update() {\n          if (!this.$refs.nav) return;\n          var sizeName = this.sizeName;\n          var navSize = this.$refs.nav['offset' + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];\n          var containerSize = this.$refs.navScroll['offset' + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];\n          var currentOffset = this.navOffset;\n\n          if (containerSize < navSize) {\n            var _currentOffset = this.navOffset;\n            this.scrollable = this.scrollable || {};\n            this.scrollable.prev = _currentOffset;\n            this.scrollable.next = _currentOffset + containerSize < navSize;\n\n            if (navSize - _currentOffset < containerSize) {\n              this.navOffset = navSize - containerSize;\n            }\n          } else {\n            this.scrollable = false;\n\n            if (currentOffset > 0) {\n              this.navOffset = 0;\n            }\n          }\n        },\n        changeTab: function changeTab(e) {\n          var keyCode = e.keyCode;\n          var nextIndex = void 0;\n          var currentIndex = void 0,\n              tabList = void 0;\n\n          if ([37, 38, 39, 40].indexOf(keyCode) !== -1) {\n            // 左右上下键更换tab\n            tabList = e.currentTarget.querySelectorAll('[role=tab]');\n            currentIndex = Array.prototype.indexOf.call(tabList, e.target);\n          } else {\n            return;\n          }\n\n          if (keyCode === 37 || keyCode === 38) {\n            // left\n            if (currentIndex === 0) {\n              // first\n              nextIndex = tabList.length - 1;\n            } else {\n              nextIndex = currentIndex - 1;\n            }\n          } else {\n            // right\n            if (currentIndex < tabList.length - 1) {\n              // not last\n              nextIndex = currentIndex + 1;\n            } else {\n              nextIndex = 0;\n            }\n          }\n\n          tabList[nextIndex].focus(); // 改变焦点元素\n\n          tabList[nextIndex].click(); // 选中下一个tab\n\n          this.setFocus();\n        },\n        setFocus: function setFocus() {\n          if (this.focusable) {\n            this.isFocus = true;\n          }\n        },\n        removeFocus: function removeFocus() {\n          this.isFocus = false;\n        },\n        visibilityChangeHandler: function visibilityChangeHandler() {\n          var _this = this;\n\n          var visibility = document.visibilityState;\n\n          if (visibility === 'hidden') {\n            this.focusable = false;\n          } else if (visibility === 'visible') {\n            setTimeout(function () {\n              _this.focusable = true;\n            }, 50);\n          }\n        },\n        windowBlurHandler: function windowBlurHandler() {\n          this.focusable = false;\n        },\n        windowFocusHandler: function windowFocusHandler() {\n          var _this2 = this;\n\n          setTimeout(function () {\n            _this2.focusable = true;\n          }, 50);\n        }\n      },\n      updated: function updated() {\n        this.update();\n      },\n      render: function render(h) {\n        var _this3 = this;\n\n        var type = this.type,\n            panes = this.panes,\n            editable = this.editable,\n            stretch = this.stretch,\n            onTabClick = this.onTabClick,\n            onTabRemove = this.onTabRemove,\n            navStyle = this.navStyle,\n            scrollable = this.scrollable,\n            scrollNext = this.scrollNext,\n            scrollPrev = this.scrollPrev,\n            changeTab = this.changeTab,\n            setFocus = this.setFocus,\n            removeFocus = this.removeFocus;\n        var scrollBtn = scrollable ? [h('span', {\n          'class': ['el-tabs__nav-prev', scrollable.prev ? '' : 'is-disabled'],\n          on: {\n            'click': scrollPrev\n          }\n        }, [h('i', {\n          'class': 'el-icon-arrow-left'\n        })]), h('span', {\n          'class': ['el-tabs__nav-next', scrollable.next ? '' : 'is-disabled'],\n          on: {\n            'click': scrollNext\n          }\n        }, [h('i', {\n          'class': 'el-icon-arrow-right'\n        })])] : null;\n\n        var tabs = this._l(panes, function (pane, index) {\n          var _ref;\n\n          var tabName = pane.name || pane.index || index;\n          var closable = pane.isClosable || editable;\n          pane.index = '' + index;\n          var btnClose = closable ? h('span', {\n            'class': 'el-icon-close',\n            on: {\n              'click': function click(ev) {\n                onTabRemove(pane, ev);\n              }\n            }\n          }) : null;\n          var tabLabelContent = pane.$slots.label || pane.label;\n          var tabindex = pane.active ? 0 : -1;\n          return h('div', {\n            'class': (_ref = {\n              'el-tabs__item': true\n            }, _ref['is-' + _this3.rootTabs.tabPosition] = true, _ref['is-active'] = pane.active, _ref['is-disabled'] = pane.disabled, _ref['is-closable'] = closable, _ref['is-focus'] = _this3.isFocus, _ref),\n            attrs: {\n              id: 'tab-' + tabName,\n              'aria-controls': 'pane-' + tabName,\n              role: 'tab',\n              'aria-selected': pane.active,\n              tabindex: tabindex\n            },\n            key: 'tab-' + tabName,\n            ref: 'tabs',\n            refInFor: true,\n            on: {\n              'focus': function focus() {\n                setFocus();\n              },\n              'blur': function blur() {\n                removeFocus();\n              },\n              'click': function click(ev) {\n                removeFocus();\n                onTabClick(pane, tabName, ev);\n              },\n              'keydown': function keydown(ev) {\n                if (closable && (ev.keyCode === 46 || ev.keyCode === 8)) {\n                  onTabRemove(pane, ev);\n                }\n              }\n            }\n          }, [tabLabelContent, btnClose]);\n        });\n\n        return h('div', {\n          'class': ['el-tabs__nav-wrap', scrollable ? 'is-scrollable' : '', 'is-' + this.rootTabs.tabPosition]\n        }, [scrollBtn, h('div', {\n          'class': ['el-tabs__nav-scroll'],\n          ref: 'navScroll'\n        }, [h('div', {\n          'class': ['el-tabs__nav', 'is-' + this.rootTabs.tabPosition, stretch && ['top', 'bottom'].indexOf(this.rootTabs.tabPosition) !== -1 ? 'is-stretch' : ''],\n          ref: 'nav',\n          style: navStyle,\n          attrs: {\n            role: 'tablist'\n          },\n          on: {\n            'keydown': changeTab\n          }\n        }, [!type ? h('tab-bar', {\n          attrs: {\n            tabs: panes\n          }\n        }) : null, tabs])])]);\n      },\n      mounted: function mounted() {\n        var _this4 = this;\n\n        Object(resize_event_[\"addResizeListener\"])(this.$el, this.update);\n        document.addEventListener('visibilitychange', this.visibilityChangeHandler);\n        window.addEventListener('blur', this.windowBlurHandler);\n        window.addEventListener('focus', this.windowFocusHandler);\n        setTimeout(function () {\n          _this4.scrollToActiveTab();\n        }, 0);\n      },\n      beforeDestroy: function beforeDestroy() {\n        if (this.$el && this.update) Object(resize_event_[\"removeResizeListener\"])(this.$el, this.update);\n        document.removeEventListener('visibilitychange', this.visibilityChangeHandler);\n        window.removeEventListener('blur', this.windowBlurHandler);\n        window.removeEventListener('focus', this.windowFocusHandler);\n      }\n    }; // CONCATENATED MODULE: ./packages/tabs/src/tab-nav.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var src_tab_navvue_type_script_lang_js_ = tab_navvue_type_script_lang_js_; // CONCATENATED MODULE: ./packages/tabs/src/tab-nav.vue\n\n    var tab_nav_render, tab_nav_staticRenderFns;\n    /* normalize component */\n\n    var tab_nav_component = Object(componentNormalizer[\"a\"\n    /* default */\n    ])(src_tab_navvue_type_script_lang_js_, tab_nav_render, tab_nav_staticRenderFns, false, null, null, null);\n    /* hot reload */\n\n    if (false) { var tab_nav_api; }\n\n    tab_nav_component.options.__file = \"packages/tabs/src/tab-nav.vue\";\n    /* harmony default export */\n\n    var tab_nav = tab_nav_component.exports; // CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tabs/src/tabs.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var tabsvue_type_script_lang_js_ = {\n      name: 'ElTabs',\n      components: {\n        TabNav: tab_nav\n      },\n      props: {\n        type: String,\n        activeName: String,\n        closable: Boolean,\n        addable: Boolean,\n        value: {},\n        editable: Boolean,\n        tabPosition: {\n          type: String,\n          default: 'top'\n        },\n        beforeLeave: Function,\n        stretch: Boolean\n      },\n      provide: function provide() {\n        return {\n          rootTabs: this\n        };\n      },\n      data: function data() {\n        return {\n          currentName: this.value || this.activeName,\n          panes: []\n        };\n      },\n      watch: {\n        activeName: function activeName(value) {\n          this.setCurrentName(value);\n        },\n        value: function value(_value) {\n          this.setCurrentName(_value);\n        },\n        currentName: function currentName(value) {\n          var _this = this;\n\n          if (this.$refs.nav) {\n            this.$nextTick(function () {\n              _this.$refs.nav.$nextTick(function (_) {\n                _this.$refs.nav.scrollToActiveTab();\n              });\n            });\n          }\n        }\n      },\n      methods: {\n        calcPaneInstances: function calcPaneInstances() {\n          var _this2 = this;\n\n          var isForceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n          if (this.$slots.default) {\n            var paneSlots = this.$slots.default.filter(function (vnode) {\n              return vnode.tag && vnode.componentOptions && vnode.componentOptions.Ctor.options.name === 'ElTabPane';\n            }); // update indeed\n\n            var panes = paneSlots.map(function (_ref) {\n              var componentInstance = _ref.componentInstance;\n              return componentInstance;\n            });\n            var panesChanged = !(panes.length === this.panes.length && panes.every(function (pane, index) {\n              return pane === _this2.panes[index];\n            }));\n\n            if (isForceUpdate || panesChanged) {\n              this.panes = panes;\n            }\n          } else if (this.panes.length !== 0) {\n            this.panes = [];\n          }\n        },\n        handleTabClick: function handleTabClick(tab, tabName, event) {\n          if (tab.disabled) return;\n          this.setCurrentName(tabName);\n          this.$emit('tab-click', tab, event);\n        },\n        handleTabRemove: function handleTabRemove(pane, ev) {\n          if (pane.disabled) return;\n          ev.stopPropagation();\n          this.$emit('edit', pane.name, 'remove');\n          this.$emit('tab-remove', pane.name);\n        },\n        handleTabAdd: function handleTabAdd() {\n          this.$emit('edit', null, 'add');\n          this.$emit('tab-add');\n        },\n        setCurrentName: function setCurrentName(value) {\n          var _this3 = this;\n\n          var changeCurrentName = function changeCurrentName() {\n            _this3.currentName = value;\n\n            _this3.$emit('input', value);\n          };\n\n          if (this.currentName !== value && this.beforeLeave) {\n            var before = this.beforeLeave(value, this.currentName);\n\n            if (before && before.then) {\n              before.then(function () {\n                changeCurrentName();\n                _this3.$refs.nav && _this3.$refs.nav.removeFocus();\n              }, function () {// https://github.com/ElemeFE/element/pull/14816\n                // ignore promise rejection in `before-leave` hook\n              });\n            } else if (before !== false) {\n              changeCurrentName();\n            }\n          } else {\n            changeCurrentName();\n          }\n        }\n      },\n      render: function render(h) {\n        var _ref2;\n\n        var type = this.type,\n            handleTabClick = this.handleTabClick,\n            handleTabRemove = this.handleTabRemove,\n            handleTabAdd = this.handleTabAdd,\n            currentName = this.currentName,\n            panes = this.panes,\n            editable = this.editable,\n            addable = this.addable,\n            tabPosition = this.tabPosition,\n            stretch = this.stretch;\n        var newButton = editable || addable ? h('span', {\n          'class': 'el-tabs__new-tab',\n          on: {\n            'click': handleTabAdd,\n            'keydown': function keydown(ev) {\n              if (ev.keyCode === 13) {\n                handleTabAdd();\n              }\n            }\n          },\n          attrs: {\n            tabindex: '0'\n          }\n        }, [h('i', {\n          'class': 'el-icon-plus'\n        })]) : null;\n        var navData = {\n          props: {\n            currentName: currentName,\n            onTabClick: handleTabClick,\n            onTabRemove: handleTabRemove,\n            editable: editable,\n            type: type,\n            panes: panes,\n            stretch: stretch\n          },\n          ref: 'nav'\n        };\n        var header = h('div', {\n          'class': ['el-tabs__header', 'is-' + tabPosition]\n        }, [newButton, h('tab-nav', navData)]);\n        var panels = h('div', {\n          'class': 'el-tabs__content'\n        }, [this.$slots.default]);\n        return h('div', {\n          'class': (_ref2 = {\n            'el-tabs': true,\n            'el-tabs--card': type === 'card'\n          }, _ref2['el-tabs--' + tabPosition] = true, _ref2['el-tabs--border-card'] = type === 'border-card', _ref2)\n        }, [tabPosition !== 'bottom' ? [header, panels] : [panels, header]]);\n      },\n      created: function created() {\n        if (!this.currentName) {\n          this.setCurrentName('0');\n        }\n\n        this.$on('tab-nav-update', this.calcPaneInstances.bind(null, true));\n      },\n      mounted: function mounted() {\n        this.calcPaneInstances();\n      },\n      updated: function updated() {\n        this.calcPaneInstances();\n      }\n    }; // CONCATENATED MODULE: ./packages/tabs/src/tabs.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var src_tabsvue_type_script_lang_js_ = tabsvue_type_script_lang_js_; // CONCATENATED MODULE: ./packages/tabs/src/tabs.vue\n\n    var tabs_render, tabs_staticRenderFns;\n    /* normalize component */\n\n    var tabs_component = Object(componentNormalizer[\"a\"\n    /* default */\n    ])(src_tabsvue_type_script_lang_js_, tabs_render, tabs_staticRenderFns, false, null, null, null);\n    /* hot reload */\n\n    if (false) { var tabs_api; }\n\n    tabs_component.options.__file = \"packages/tabs/src/tabs.vue\";\n    /* harmony default export */\n\n    var tabs = tabs_component.exports; // CONCATENATED MODULE: ./packages/tabs/index.js\n\n    /* istanbul ignore next */\n\n    tabs.install = function (Vue) {\n      Vue.component(tabs.name, tabs);\n    };\n    /* harmony default export */\n\n\n    var packages_tabs = __webpack_exports__[\"default\"] = tabs;\n    /***/\n  }\n  /******/\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/tabs.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/resize-event.js":
/*!***********************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/resize-event.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.removeResizeListener = exports.addResizeListener = undefined;\n\nvar _resizeObserverPolyfill = __webpack_require__(/*! resize-observer-polyfill */ \"./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\");\n\nvar _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isServer = typeof window === 'undefined';\n/* istanbul ignore next */\n\nvar resizeHandler = function resizeHandler(entries) {\n  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var entry = _ref;\n    var listeners = entry.target.__resizeListeners__ || [];\n\n    if (listeners.length) {\n      listeners.forEach(function (fn) {\n        fn();\n      });\n    }\n  }\n};\n/* istanbul ignore next */\n\n\nvar addResizeListener = exports.addResizeListener = function addResizeListener(element, fn) {\n  if (isServer) return;\n\n  if (!element.__resizeListeners__) {\n    element.__resizeListeners__ = [];\n    element.__ro__ = new _resizeObserverPolyfill2.default(resizeHandler);\n\n    element.__ro__.observe(element);\n  }\n\n  element.__resizeListeners__.push(fn);\n};\n/* istanbul ignore next */\n\n\nvar removeResizeListener = exports.removeResizeListener = function removeResizeListener(element, fn) {\n  if (!element || !element.__resizeListeners__) return;\n\n  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n\n  if (!element.__resizeListeners__.length) {\n    element.__ro__.disconnect();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvcmVzaXplLWV2ZW50LmpzPzQwMTAiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsImFkZFJlc2l6ZUxpc3RlbmVyIiwidW5kZWZpbmVkIiwiX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwiLCJyZXF1aXJlIiwiX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsImRlZmF1bHQiLCJpc1NlcnZlciIsIndpbmRvdyIsInJlc2l6ZUhhbmRsZXIiLCJlbnRyaWVzIiwiX2l0ZXJhdG9yIiwiX2lzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3JlZiIsImxlbmd0aCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlbnRyeSIsImxpc3RlbmVycyIsInRhcmdldCIsIl9fcmVzaXplTGlzdGVuZXJzX18iLCJmb3JFYWNoIiwiZm4iLCJlbGVtZW50IiwiX19yb19fIiwib2JzZXJ2ZSIsInB1c2giLCJzcGxpY2UiLCJpbmRleE9mIiwiZGlzY29ubmVjdCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLG9CQUFSLEdBQStCRixPQUFPLENBQUNHLGlCQUFSLEdBQTRCQyxTQUEzRDs7QUFFQSxJQUFJQyx1QkFBdUIsR0FBR0MsbUJBQU8sQ0FBQyxtR0FBRCxDQUFyQzs7QUFFQSxJQUFJQyx3QkFBd0IsR0FBR0Msc0JBQXNCLENBQUNILHVCQUFELENBQXJEOztBQUVBLFNBQVNHLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDUixVQUFYLEdBQXdCUSxHQUF4QixHQUE4QjtBQUFFQyxXQUFPLEVBQUVEO0FBQVgsR0FBckM7QUFBd0Q7O0FBRS9GLElBQUlFLFFBQVEsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWpDO0FBRUE7O0FBQ0EsSUFBSUMsYUFBYSxHQUFHLFNBQVNBLGFBQVQsQ0FBdUJDLE9BQXZCLEVBQWdDO0FBQ2xELE9BQUssSUFBSUMsU0FBUyxHQUFHRCxPQUFoQixFQUF5QkUsUUFBUSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsU0FBZCxDQUFwQyxFQUE4REksRUFBRSxHQUFHLENBQW5FLEVBQXNFSixTQUFTLEdBQUdDLFFBQVEsR0FBR0QsU0FBSCxHQUFlQSxTQUFTLENBQUNLLE1BQU0sQ0FBQ0MsUUFBUixDQUFULEVBQTlHLElBQThJO0FBQzVJLFFBQUlDLElBQUo7O0FBRUEsUUFBSU4sUUFBSixFQUFjO0FBQ1osVUFBSUcsRUFBRSxJQUFJSixTQUFTLENBQUNRLE1BQXBCLEVBQTRCO0FBQzVCRCxVQUFJLEdBQUdQLFNBQVMsQ0FBQ0ksRUFBRSxFQUFILENBQWhCO0FBQ0QsS0FIRCxNQUdPO0FBQ0xBLFFBQUUsR0FBR0osU0FBUyxDQUFDUyxJQUFWLEVBQUw7QUFDQSxVQUFJTCxFQUFFLENBQUNNLElBQVAsRUFBYTtBQUNiSCxVQUFJLEdBQUdILEVBQUUsQ0FBQ08sS0FBVjtBQUNEOztBQUVELFFBQUlDLEtBQUssR0FBR0wsSUFBWjtBQUVBLFFBQUlNLFNBQVMsR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFDLG1CQUFiLElBQW9DLEVBQXBEOztBQUNBLFFBQUlGLFNBQVMsQ0FBQ0wsTUFBZCxFQUFzQjtBQUNwQkssZUFBUyxDQUFDRyxPQUFWLENBQWtCLFVBQVVDLEVBQVYsRUFBYztBQUM5QkEsVUFBRTtBQUNILE9BRkQ7QUFHRDtBQUNGO0FBQ0YsQ0F0QkQ7QUF3QkE7OztBQUNBLElBQUk3QixpQkFBaUIsR0FBR0gsT0FBTyxDQUFDRyxpQkFBUixHQUE0QixTQUFTQSxpQkFBVCxDQUEyQjhCLE9BQTNCLEVBQW9DRCxFQUFwQyxFQUF3QztBQUMxRixNQUFJckIsUUFBSixFQUFjOztBQUNkLE1BQUksQ0FBQ3NCLE9BQU8sQ0FBQ0gsbUJBQWIsRUFBa0M7QUFDaENHLFdBQU8sQ0FBQ0gsbUJBQVIsR0FBOEIsRUFBOUI7QUFDQUcsV0FBTyxDQUFDQyxNQUFSLEdBQWlCLElBQUkzQix3QkFBd0IsQ0FBQ0csT0FBN0IsQ0FBcUNHLGFBQXJDLENBQWpCOztBQUNBb0IsV0FBTyxDQUFDQyxNQUFSLENBQWVDLE9BQWYsQ0FBdUJGLE9BQXZCO0FBQ0Q7O0FBQ0RBLFNBQU8sQ0FBQ0gsbUJBQVIsQ0FBNEJNLElBQTVCLENBQWlDSixFQUFqQztBQUNELENBUkQ7QUFVQTs7O0FBQ0EsSUFBSTlCLG9CQUFvQixHQUFHRixPQUFPLENBQUNFLG9CQUFSLEdBQStCLFNBQVNBLG9CQUFULENBQThCK0IsT0FBOUIsRUFBdUNELEVBQXZDLEVBQTJDO0FBQ25HLE1BQUksQ0FBQ0MsT0FBRCxJQUFZLENBQUNBLE9BQU8sQ0FBQ0gsbUJBQXpCLEVBQThDOztBQUM5Q0csU0FBTyxDQUFDSCxtQkFBUixDQUE0Qk8sTUFBNUIsQ0FBbUNKLE9BQU8sQ0FBQ0gsbUJBQVIsQ0FBNEJRLE9BQTVCLENBQW9DTixFQUFwQyxDQUFuQyxFQUE0RSxDQUE1RTs7QUFDQSxNQUFJLENBQUNDLE9BQU8sQ0FBQ0gsbUJBQVIsQ0FBNEJQLE1BQWpDLEVBQXlDO0FBQ3ZDVSxXQUFPLENBQUNDLE1BQVIsQ0FBZUssVUFBZjtBQUNEO0FBQ0YsQ0FORCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9lbGVtZW50LXVpL2xpYi91dGlscy9yZXNpemUtZXZlbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnJlbW92ZVJlc2l6ZUxpc3RlbmVyID0gZXhwb3J0cy5hZGRSZXNpemVMaXN0ZW5lciA9IHVuZGVmaW5lZDtcblxudmFyIF9yZXNpemVPYnNlcnZlclBvbHlmaWxsID0gcmVxdWlyZSgncmVzaXplLW9ic2VydmVyLXBvbHlmaWxsJyk7XG5cbnZhciBfcmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNpemVPYnNlcnZlclBvbHlmaWxsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG52YXIgcmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoZW50cmllcykge1xuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRyaWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgIHZhciBfcmVmO1xuXG4gICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGVudHJ5ID0gX3JlZjtcblxuICAgIHZhciBsaXN0ZW5lcnMgPSBlbnRyeS50YXJnZXQuX19yZXNpemVMaXN0ZW5lcnNfXyB8fCBbXTtcbiAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG52YXIgYWRkUmVzaXplTGlzdGVuZXIgPSBleHBvcnRzLmFkZFJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24gYWRkUmVzaXplTGlzdGVuZXIoZWxlbWVudCwgZm4pIHtcbiAgaWYgKGlzU2VydmVyKSByZXR1cm47XG4gIGlmICghZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fKSB7XG4gICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fID0gW107XG4gICAgZWxlbWVudC5fX3JvX18gPSBuZXcgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwyLmRlZmF1bHQocmVzaXplSGFuZGxlcik7XG4gICAgZWxlbWVudC5fX3JvX18ub2JzZXJ2ZShlbGVtZW50KTtcbiAgfVxuICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ucHVzaChmbik7XG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xudmFyIHJlbW92ZVJlc2l6ZUxpc3RlbmVyID0gZXhwb3J0cy5yZW1vdmVSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKGVsZW1lbnQsIGZuKSB7XG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fKSByZXR1cm47XG4gIGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5zcGxpY2UoZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLmluZGV4T2YoZm4pLCAxKTtcbiAgaWYgKCFlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ubGVuZ3RoKSB7XG4gICAgZWxlbWVudC5fX3JvX18uZGlzY29ubmVjdCgpO1xuICB9XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/resize-event.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/types.js":
/*!****************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/types.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.isString = isString;\nexports.isObject = isObject;\nexports.isHtmlElement = isHtmlElement;\n\nfunction isString(obj) {\n  return Object.prototype.toString.call(obj) === '[object String]';\n}\n\nfunction isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nfunction isHtmlElement(node) {\n  return node && node.nodeType === Node.ELEMENT_NODE;\n}\n\nvar isFunction = exports.isFunction = function isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n};\n\nvar isUndefined = exports.isUndefined = function isUndefined(val) {\n  return val === void 0;\n};\n\nvar isDefined = exports.isDefined = function isDefined(val) {\n  return val !== undefined && val !== null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvdHlwZXMuanM/YTc0MiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImlzU3RyaW5nIiwiaXNPYmplY3QiLCJpc0h0bWxFbGVtZW50Iiwib2JqIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwibm9kZSIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImlzRnVuY3Rpb24iLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRUeXBlIiwiaXNVbmRlZmluZWQiLCJ2YWwiLCJpc0RlZmluZWQiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxRQUFSLEdBQW1CQSxRQUFuQjtBQUNBRixPQUFPLENBQUNHLFFBQVIsR0FBbUJBLFFBQW5CO0FBQ0FILE9BQU8sQ0FBQ0ksYUFBUixHQUF3QkEsYUFBeEI7O0FBQ0EsU0FBU0YsUUFBVCxDQUFrQkcsR0FBbEIsRUFBdUI7QUFDckIsU0FBT0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEdBQS9CLE1BQXdDLGlCQUEvQztBQUNEOztBQUVELFNBQVNGLFFBQVQsQ0FBa0JFLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU9DLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixHQUEvQixNQUF3QyxpQkFBL0M7QUFDRDs7QUFFRCxTQUFTRCxhQUFULENBQXVCTSxJQUF2QixFQUE2QjtBQUMzQixTQUFPQSxJQUFJLElBQUlBLElBQUksQ0FBQ0MsUUFBTCxLQUFrQkMsSUFBSSxDQUFDQyxZQUF0QztBQUNEOztBQUVELElBQUlDLFVBQVUsR0FBR2QsT0FBTyxDQUFDYyxVQUFSLEdBQXFCLFNBQVNBLFVBQVQsQ0FBb0JDLGVBQXBCLEVBQXFDO0FBQ3pFLE1BQUlDLE9BQU8sR0FBRyxFQUFkO0FBQ0EsU0FBT0QsZUFBZSxJQUFJQyxPQUFPLENBQUNSLFFBQVIsQ0FBaUJDLElBQWpCLENBQXNCTSxlQUF0QixNQUEyQyxtQkFBckU7QUFDRCxDQUhEOztBQUtBLElBQUlFLFdBQVcsR0FBR2pCLE9BQU8sQ0FBQ2lCLFdBQVIsR0FBc0IsU0FBU0EsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEI7QUFDaEUsU0FBT0EsR0FBRyxLQUFLLEtBQUssQ0FBcEI7QUFDRCxDQUZEOztBQUlBLElBQUlDLFNBQVMsR0FBR25CLE9BQU8sQ0FBQ21CLFNBQVIsR0FBb0IsU0FBU0EsU0FBVCxDQUFtQkQsR0FBbkIsRUFBd0I7QUFDMUQsU0FBT0EsR0FBRyxLQUFLRSxTQUFSLElBQXFCRixHQUFHLEtBQUssSUFBcEM7QUFDRCxDQUZEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtdWkvbGliL3V0aWxzL3R5cGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZXhwb3J0cy5pc0h0bWxFbGVtZW50ID0gaXNIdG1sRWxlbWVudDtcbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFO1xufVxuXG52YXIgaXNGdW5jdGlvbiA9IGV4cG9ydHMuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgaXNVbmRlZmluZWQgPSBleHBvcnRzLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IHZvaWQgMDtcbn07XG5cbnZhciBpc0RlZmluZWQgPSBleHBvcnRzLmlzRGVmaW5lZCA9IGZ1bmN0aW9uIGlzRGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkICYmIHZhbCAhPT0gbnVsbDtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/types.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/util.js":
/*!***************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/util.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.isEmpty = exports.isEqual = exports.arrayEquals = exports.looseEqual = exports.capitalize = exports.kebabCase = exports.autoprefixer = exports.isFirefox = exports.isEdge = exports.isIE = exports.coerceTruthyValueToArray = exports.arrayFind = exports.arrayFindIndex = exports.escapeRegexpString = exports.valueEquals = exports.generateId = exports.getValueByPath = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.noop = noop;\nexports.hasOwn = hasOwn;\nexports.toObject = toObject;\nexports.getPropByPath = getPropByPath;\nexports.rafThrottle = rafThrottle;\nexports.objToArray = objToArray;\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _types = __webpack_require__(/*! element-ui/lib/utils/types */ \"./node_modules/element-ui/lib/utils/types.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction noop() {}\n\n;\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n;\n\nfunction extend(to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n\n  return to;\n}\n\n;\n\nfunction toObject(arr) {\n  var res = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n\n  return res;\n}\n\n;\n\nvar getValueByPath = exports.getValueByPath = function getValueByPath(object, prop) {\n  prop = prop || '';\n  var paths = prop.split('.');\n  var current = object;\n  var result = null;\n\n  for (var i = 0, j = paths.length; i < j; i++) {\n    var path = paths[i];\n    if (!current) break;\n\n    if (i === j - 1) {\n      result = current[path];\n      break;\n    }\n\n    current = current[path];\n  }\n\n  return result;\n};\n\nfunction getPropByPath(obj, path, strict) {\n  var tempObj = obj;\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1');\n  path = path.replace(/^\\./, '');\n  var keyArr = path.split('.');\n  var i = 0;\n\n  for (var len = keyArr.length; i < len - 1; ++i) {\n    if (!tempObj && !strict) break;\n    var key = keyArr[i];\n\n    if (key in tempObj) {\n      tempObj = tempObj[key];\n    } else {\n      if (strict) {\n        throw new Error('please transfer a valid prop path to form item!');\n      }\n\n      break;\n    }\n  }\n\n  return {\n    o: tempObj,\n    k: keyArr[i],\n    v: tempObj ? tempObj[keyArr[i]] : null\n  };\n}\n\n;\n\nvar generateId = exports.generateId = function generateId() {\n  return Math.floor(Math.random() * 10000);\n};\n\nvar valueEquals = exports.valueEquals = function valueEquals(a, b) {\n  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript\n  if (a === b) return true;\n  if (!(a instanceof Array)) return false;\n  if (!(b instanceof Array)) return false;\n  if (a.length !== b.length) return false;\n\n  for (var i = 0; i !== a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n};\n\nvar escapeRegexpString = exports.escapeRegexpString = function escapeRegexpString() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return String(value).replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n}; // TODO: use native Array.find, Array.findIndex when IE support is dropped\n\n\nvar arrayFindIndex = exports.arrayFindIndex = function arrayFindIndex(arr, pred) {\n  for (var i = 0; i !== arr.length; ++i) {\n    if (pred(arr[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nvar arrayFind = exports.arrayFind = function arrayFind(arr, pred) {\n  var idx = arrayFindIndex(arr, pred);\n  return idx !== -1 ? arr[idx] : undefined;\n}; // coerce truthy value to array\n\n\nvar coerceTruthyValueToArray = exports.coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {\n  if (Array.isArray(val)) {\n    return val;\n  } else if (val) {\n    return [val];\n  } else {\n    return [];\n  }\n};\n\nvar isIE = exports.isIE = function isIE() {\n  return !_vue2.default.prototype.$isServer && !isNaN(Number(document.documentMode));\n};\n\nvar isEdge = exports.isEdge = function isEdge() {\n  return !_vue2.default.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1;\n};\n\nvar isFirefox = exports.isFirefox = function isFirefox() {\n  return !_vue2.default.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);\n};\n\nvar autoprefixer = exports.autoprefixer = function autoprefixer(style) {\n  if ((typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') return style;\n  var rules = ['transform', 'transition', 'animation'];\n  var prefixes = ['ms-', 'webkit-'];\n  rules.forEach(function (rule) {\n    var value = style[rule];\n\n    if (rule && value) {\n      prefixes.forEach(function (prefix) {\n        style[prefix + rule] = value;\n      });\n    }\n  });\n  return style;\n};\n\nvar kebabCase = exports.kebabCase = function kebabCase(str) {\n  var hyphenateRE = /([^-])([A-Z])/g;\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n};\n\nvar capitalize = exports.capitalize = function capitalize(str) {\n  if (!(0, _types.isString)(str)) return str;\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nvar looseEqual = exports.looseEqual = function looseEqual(a, b) {\n  var isObjectA = (0, _types.isObject)(a);\n  var isObjectB = (0, _types.isObject)(b);\n\n  if (isObjectA && isObjectB) {\n    return JSON.stringify(a) === JSON.stringify(b);\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b);\n  } else {\n    return false;\n  }\n};\n\nvar arrayEquals = exports.arrayEquals = function arrayEquals(arrayA, arrayB) {\n  arrayA = arrayA || [];\n  arrayB = arrayB || [];\n\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  for (var i = 0; i < arrayA.length; i++) {\n    if (!looseEqual(arrayA[i], arrayB[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar isEqual = exports.isEqual = function isEqual(value1, value2) {\n  if (Array.isArray(value1) && Array.isArray(value2)) {\n    return arrayEquals(value1, value2);\n  }\n\n  return looseEqual(value1, value2);\n};\n\nvar isEmpty = exports.isEmpty = function isEmpty(val) {\n  // null or undefined\n  if (val == null) return true;\n  if (typeof val === 'boolean') return false;\n  if (typeof val === 'number') return !val;\n  if (val instanceof Error) return val.message === '';\n\n  switch (Object.prototype.toString.call(val)) {\n    // String or Array\n    case '[object String]':\n    case '[object Array]':\n      return !val.length;\n    // Map or Set or File\n\n    case '[object File]':\n    case '[object Map]':\n    case '[object Set]':\n      {\n        return !val.size;\n      }\n    // Plain Object\n\n    case '[object Object]':\n      {\n        return !Object.keys(val).length;\n      }\n  }\n\n  return false;\n};\n\nfunction rafThrottle(fn) {\n  var locked = false;\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (locked) return;\n    locked = true;\n    window.requestAnimationFrame(function (_) {\n      fn.apply(_this, args);\n      locked = false;\n    });\n  };\n}\n\nfunction objToArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n\n  return isEmpty(obj) ? [] : [obj];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvdXRpbC5qcz84MTIyIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiaXNFbXB0eSIsImlzRXF1YWwiLCJhcnJheUVxdWFscyIsImxvb3NlRXF1YWwiLCJjYXBpdGFsaXplIiwia2ViYWJDYXNlIiwiYXV0b3ByZWZpeGVyIiwiaXNGaXJlZm94IiwiaXNFZGdlIiwiaXNJRSIsImNvZXJjZVRydXRoeVZhbHVlVG9BcnJheSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiZXNjYXBlUmVnZXhwU3RyaW5nIiwidmFsdWVFcXVhbHMiLCJnZW5lcmF0ZUlkIiwiZ2V0VmFsdWVCeVBhdGgiLCJ1bmRlZmluZWQiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm5vb3AiLCJoYXNPd24iLCJ0b09iamVjdCIsImdldFByb3BCeVBhdGgiLCJyYWZUaHJvdHRsZSIsIm9ialRvQXJyYXkiLCJfdnVlIiwicmVxdWlyZSIsIl92dWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl90eXBlcyIsImRlZmF1bHQiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImtleSIsImNhbGwiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwiYXJyIiwicmVzIiwiaSIsImxlbmd0aCIsIm9iamVjdCIsInByb3AiLCJwYXRocyIsInNwbGl0IiwiY3VycmVudCIsInJlc3VsdCIsImoiLCJwYXRoIiwic3RyaWN0IiwidGVtcE9iaiIsInJlcGxhY2UiLCJrZXlBcnIiLCJsZW4iLCJFcnJvciIsIm8iLCJrIiwidiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImEiLCJiIiwiQXJyYXkiLCJ2YWx1ZSIsImFyZ3VtZW50cyIsIlN0cmluZyIsInByZWQiLCJpZHgiLCJ2YWwiLCJpc0FycmF5IiwiJGlzU2VydmVyIiwiaXNOYU4iLCJOdW1iZXIiLCJkb2N1bWVudCIsImRvY3VtZW50TW9kZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJ3aW5kb3ciLCJtYXRjaCIsInN0eWxlIiwicnVsZXMiLCJwcmVmaXhlcyIsImZvckVhY2giLCJydWxlIiwicHJlZml4Iiwic3RyIiwiaHlwaGVuYXRlUkUiLCJ0b0xvd2VyQ2FzZSIsImlzU3RyaW5nIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImlzT2JqZWN0QSIsImlzT2JqZWN0IiwiaXNPYmplY3RCIiwiSlNPTiIsInN0cmluZ2lmeSIsImFycmF5QSIsImFycmF5QiIsInZhbHVlMSIsInZhbHVlMiIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsInNpemUiLCJrZXlzIiwiZm4iLCJsb2NrZWQiLCJfdGhpcyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl8iLCJhcHBseSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JGLE9BQU8sQ0FBQ0csT0FBUixHQUFrQkgsT0FBTyxDQUFDSSxXQUFSLEdBQXNCSixPQUFPLENBQUNLLFVBQVIsR0FBcUJMLE9BQU8sQ0FBQ00sVUFBUixHQUFxQk4sT0FBTyxDQUFDTyxTQUFSLEdBQW9CUCxPQUFPLENBQUNRLFlBQVIsR0FBdUJSLE9BQU8sQ0FBQ1MsU0FBUixHQUFvQlQsT0FBTyxDQUFDVSxNQUFSLEdBQWlCVixPQUFPLENBQUNXLElBQVIsR0FBZVgsT0FBTyxDQUFDWSx3QkFBUixHQUFtQ1osT0FBTyxDQUFDYSxTQUFSLEdBQW9CYixPQUFPLENBQUNjLGNBQVIsR0FBeUJkLE9BQU8sQ0FBQ2Usa0JBQVIsR0FBNkJmLE9BQU8sQ0FBQ2dCLFdBQVIsR0FBc0JoQixPQUFPLENBQUNpQixVQUFSLEdBQXFCakIsT0FBTyxDQUFDa0IsY0FBUixHQUF5QkMsU0FBcFg7O0FBRUEsSUFBSUMsT0FBTyxHQUFH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QUFLLGlCQUFMO0FBQ0U7QUFDRSxlQUFPLENBQUMxRSxNQUFNLENBQUMyRSxJQUFQLENBQVlyQyxHQUFaLEVBQWlCN0IsTUFBekI7QUFDRDtBQWpCTDs7QUFvQkEsU0FBTyxLQUFQO0FBQ0QsQ0EvQkQ7O0FBaUNBLFNBQVNsQixXQUFULENBQXFCcUYsRUFBckIsRUFBeUI7QUFDdkIsTUFBSUMsTUFBTSxHQUFHLEtBQWI7QUFDQSxTQUFPLFlBQVk7QUFDakIsUUFBSUMsS0FBSyxHQUFHLElBQVo7O0FBRUEsU0FBSyxJQUFJQyxJQUFJLEdBQUc3QyxTQUFTLENBQUN6QixNQUFyQixFQUE2QnVFLElBQUksR0FBR2hELEtBQUssQ0FBQytDLElBQUQsQ0FBekMsRUFBaURFLElBQUksR0FBRyxDQUE3RCxFQUFnRUEsSUFBSSxHQUFHRixJQUF2RSxFQUE2RUUsSUFBSSxFQUFqRixFQUFxRjtBQUNuRkQsVUFBSSxDQUFDQyxJQUFELENBQUosR0FBYS9DLFNBQVMsQ0FBQytDLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxRQUFJSixNQUFKLEVBQVk7QUFDWkEsVUFBTSxHQUFHLElBQVQ7QUFDQTdCLFVBQU0sQ0FBQ2tDLHFCQUFQLENBQTZCLFVBQVVDLENBQVYsRUFBYTtBQUN4Q1AsUUFBRSxDQUFDUSxLQUFILENBQVNOLEtBQVQsRUFBZ0JFLElBQWhCO0FBQ0FILFlBQU0sR0FBRyxLQUFUO0FBQ0QsS0FIRDtBQUlELEdBYkQ7QUFjRDs7QUFFRCxTQUFTckYsVUFBVCxDQUFvQlIsR0FBcEIsRUFBeUI7QUFDdkIsTUFBSWdELEtBQUssQ0FBQ08sT0FBTixDQUFjdkQsR0FBZCxDQUFKLEVBQXdCO0FBQ3RCLFdBQU9BLEdBQVA7QUFDRDs7QUFDRCxTQUFPckIsT0FBTyxDQUFDcUIsR0FBRCxDQUFQLEdBQWUsRUFBZixHQUFvQixDQUFDQSxHQUFELENBQTNCO0FBQ0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvdXRpbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuaXNFbXB0eSA9IGV4cG9ydHMuaXNFcXVhbCA9IGV4cG9ydHMuYXJyYXlFcXVhbHMgPSBleHBvcnRzLmxvb3NlRXF1YWwgPSBleHBvcnRzLmNhcGl0YWxpemUgPSBleHBvcnRzLmtlYmFiQ2FzZSA9IGV4cG9ydHMuYXV0b3ByZWZpeGVyID0gZXhwb3J0cy5pc0ZpcmVmb3ggPSBleHBvcnRzLmlzRWRnZSA9IGV4cG9ydHMuaXNJRSA9IGV4cG9ydHMuY29lcmNlVHJ1dGh5VmFsdWVUb0FycmF5ID0gZXhwb3J0cy5hcnJheUZpbmQgPSBleHBvcnRzLmFycmF5RmluZEluZGV4ID0gZXhwb3J0cy5lc2NhcGVSZWdleHBTdHJpbmcgPSBleHBvcnRzLnZhbHVlRXF1YWxzID0gZXhwb3J0cy5nZW5lcmF0ZUlkID0gZXhwb3J0cy5nZXRWYWx1ZUJ5UGF0aCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLm5vb3AgPSBub29wO1xuZXhwb3J0cy5oYXNPd24gPSBoYXNPd247XG5leHBvcnRzLnRvT2JqZWN0ID0gdG9PYmplY3Q7XG5leHBvcnRzLmdldFByb3BCeVBhdGggPSBnZXRQcm9wQnlQYXRoO1xuZXhwb3J0cy5yYWZUaHJvdHRsZSA9IHJhZlRocm90dGxlO1xuZXhwb3J0cy5vYmpUb0FycmF5ID0gb2JqVG9BcnJheTtcblxudmFyIF92dWUgPSByZXF1aXJlKCd2dWUnKTtcblxudmFyIF92dWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdnVlKTtcblxudmFyIF90eXBlcyA9IHJlcXVpcmUoJ2VsZW1lbnQtdWkvbGliL3V0aWxzL3R5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn07XG5cbmZ1bmN0aW9uIGV4dGVuZCh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcblxuZnVuY3Rpb24gdG9PYmplY3QoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxudmFyIGdldFZhbHVlQnlQYXRoID0gZXhwb3J0cy5nZXRWYWx1ZUJ5UGF0aCA9IGZ1bmN0aW9uIGdldFZhbHVlQnlQYXRoKG9iamVjdCwgcHJvcCkge1xuICBwcm9wID0gcHJvcCB8fCAnJztcbiAgdmFyIHBhdGhzID0gcHJvcC5zcGxpdCgnLicpO1xuICB2YXIgY3VycmVudCA9IG9iamVjdDtcbiAgdmFyIHJlc3VsdCA9IG51bGw7XG4gIGZvciAodmFyIGkgPSAwLCBqID0gcGF0aHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgdmFyIHBhdGggPSBwYXRoc1tpXTtcbiAgICBpZiAoIWN1cnJlbnQpIGJyZWFrO1xuXG4gICAgaWYgKGkgPT09IGogLSAxKSB7XG4gICAgICByZXN1bHQgPSBjdXJyZW50W3BhdGhdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGN1cnJlbnQgPSBjdXJyZW50W3BhdGhdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBnZXRQcm9wQnlQYXRoKG9iaiwgcGF0aCwgc3RyaWN0KSB7XG4gIHZhciB0ZW1wT2JqID0gb2JqO1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXFsoXFx3KylcXF0vZywgJy4kMScpO1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwuLywgJycpO1xuXG4gIHZhciBrZXlBcnIgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBpID0gMDtcbiAgZm9yICh2YXIgbGVuID0ga2V5QXJyLmxlbmd0aDsgaSA8IGxlbiAtIDE7ICsraSkge1xuICAgIGlmICghdGVtcE9iaiAmJiAhc3RyaWN0KSBicmVhaztcbiAgICB2YXIga2V5ID0ga2V5QXJyW2ldO1xuICAgIGlmIChrZXkgaW4gdGVtcE9iaikge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BsZWFzZSB0cmFuc2ZlciBhIHZhbGlkIHByb3AgcGF0aCB0byBmb3JtIGl0ZW0hJyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvOiB0ZW1wT2JqLFxuICAgIGs6IGtleUFycltpXSxcbiAgICB2OiB0ZW1wT2JqID8gdGVtcE9ialtrZXlBcnJbaV1dIDogbnVsbFxuICB9O1xufTtcblxudmFyIGdlbmVyYXRlSWQgPSBleHBvcnRzLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xufTtcblxudmFyIHZhbHVlRXF1YWxzID0gZXhwb3J0cy52YWx1ZUVxdWFscyA9IGZ1bmN0aW9uIHZhbHVlRXF1YWxzKGEsIGIpIHtcbiAgLy8gc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTE1OTgyL2hvdy10by1jaGVjay1pZi10d28tYXJyYXlzLWFyZS1lcXVhbC13aXRoLWphdmFzY3JpcHRcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuICBpZiAoIShhIGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmICghKGIgaW5zdGFuY2VvZiBBcnJheSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBmb3IgKHZhciBpID0gMDsgaSAhPT0gYS5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgZXNjYXBlUmVnZXhwU3RyaW5nID0gZXhwb3J0cy5lc2NhcGVSZWdleHBTdHJpbmcgPSBmdW5jdGlvbiBlc2NhcGVSZWdleHBTdHJpbmcoKSB7XG4gIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJyk7XG59O1xuXG4vLyBUT0RPOiB1c2UgbmF0aXZlIEFycmF5LmZpbmQsIEFycmF5LmZpbmRJbmRleCB3aGVuIElFIHN1cHBvcnQgaXMgZHJvcHBlZFxudmFyIGFycmF5RmluZEluZGV4ID0gZXhwb3J0cy5hcnJheUZpbmRJbmRleCA9IGZ1bmN0aW9uIGFycmF5RmluZEluZGV4KGFyciwgcHJlZCkge1xuICBmb3IgKHZhciBpID0gMDsgaSAhPT0gYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHByZWQoYXJyW2ldKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn07XG5cbnZhciBhcnJheUZpbmQgPSBleHBvcnRzLmFycmF5RmluZCA9IGZ1bmN0aW9uIGFycmF5RmluZChhcnIsIHByZWQpIHtcbiAgdmFyIGlkeCA9IGFycmF5RmluZEluZGV4KGFyciwgcHJlZCk7XG4gIHJldHVybiBpZHggIT09IC0xID8gYXJyW2lkeF0gOiB1bmRlZmluZWQ7XG59O1xuXG4vLyBjb2VyY2UgdHJ1dGh5IHZhbHVlIHRvIGFycmF5XG52YXIgY29lcmNlVHJ1dGh5VmFsdWVUb0FycmF5ID0gZXhwb3J0cy5jb2VyY2VUcnV0aHlWYWx1ZVRvQXJyYXkgPSBmdW5jdGlvbiBjb2VyY2VUcnV0aHlWYWx1ZVRvQXJyYXkodmFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9IGVsc2UgaWYgKHZhbCkge1xuICAgIHJldHVybiBbdmFsXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbnZhciBpc0lFID0gZXhwb3J0cy5pc0lFID0gZnVuY3Rpb24gaXNJRSgpIHtcbiAgcmV0dXJuICFfdnVlMi5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXIgJiYgIWlzTmFOKE51bWJlcihkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbn07XG5cbnZhciBpc0VkZ2UgPSBleHBvcnRzLmlzRWRnZSA9IGZ1bmN0aW9uIGlzRWRnZSgpIHtcbiAgcmV0dXJuICFfdnVlMi5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPiAtMTtcbn07XG5cbnZhciBpc0ZpcmVmb3ggPSBleHBvcnRzLmlzRmlyZWZveCA9IGZ1bmN0aW9uIGlzRmlyZWZveCgpIHtcbiAgcmV0dXJuICFfdnVlMi5kZWZhdWx0LnByb3RvdHlwZS4kaXNTZXJ2ZXIgJiYgISF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveC9pKTtcbn07XG5cbnZhciBhdXRvcHJlZml4ZXIgPSBleHBvcnRzLmF1dG9wcmVmaXhlciA9IGZ1bmN0aW9uIGF1dG9wcmVmaXhlcihzdHlsZSkge1xuICBpZiAoKHR5cGVvZiBzdHlsZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc3R5bGUpKSAhPT0gJ29iamVjdCcpIHJldHVybiBzdHlsZTtcbiAgdmFyIHJ1bGVzID0gWyd0cmFuc2Zvcm0nLCAndHJhbnNpdGlvbicsICdhbmltYXRpb24nXTtcbiAgdmFyIHByZWZpeGVzID0gWydtcy0nLCAnd2Via2l0LSddO1xuICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbcnVsZV07XG4gICAgaWYgKHJ1bGUgJiYgdmFsdWUpIHtcbiAgICAgIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgICBzdHlsZVtwcmVmaXggKyBydWxlXSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN0eWxlO1xufTtcblxudmFyIGtlYmFiQ2FzZSA9IGV4cG9ydHMua2ViYWJDYXNlID0gZnVuY3Rpb24ga2ViYWJDYXNlKHN0cikge1xuICB2YXIgaHlwaGVuYXRlUkUgPSAvKFteLV0pKFtBLVpdKS9nO1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgY2FwaXRhbGl6ZSA9IGV4cG9ydHMuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XG4gIGlmICghKDAsIF90eXBlcy5pc1N0cmluZykoc3RyKSkgcmV0dXJuIHN0cjtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn07XG5cbnZhciBsb29zZUVxdWFsID0gZXhwb3J0cy5sb29zZUVxdWFsID0gZnVuY3Rpb24gbG9vc2VFcXVhbChhLCBiKSB7XG4gIHZhciBpc09iamVjdEEgPSAoMCwgX3R5cGVzLmlzT2JqZWN0KShhKTtcbiAgdmFyIGlzT2JqZWN0QiA9ICgwLCBfdHlwZXMuaXNPYmplY3QpKGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhKSA9PT0gSlNPTi5zdHJpbmdpZnkoYik7XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGFycmF5RXF1YWxzID0gZXhwb3J0cy5hcnJheUVxdWFscyA9IGZ1bmN0aW9uIGFycmF5RXF1YWxzKGFycmF5QSwgYXJyYXlCKSB7XG4gIGFycmF5QSA9IGFycmF5QSB8fCBbXTtcbiAgYXJyYXlCID0gYXJyYXlCIHx8IFtdO1xuXG4gIGlmIChhcnJheUEubGVuZ3RoICE9PSBhcnJheUIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheUEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWxvb3NlRXF1YWwoYXJyYXlBW2ldLCBhcnJheUJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgaXNFcXVhbCA9IGV4cG9ydHMuaXNFcXVhbCA9IGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUxLCB2YWx1ZTIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUxKSAmJiBBcnJheS5pc0FycmF5KHZhbHVlMikpIHtcbiAgICByZXR1cm4gYXJyYXlFcXVhbHModmFsdWUxLCB2YWx1ZTIpO1xuICB9XG4gIHJldHVybiBsb29zZUVxdWFsKHZhbHVlMSwgdmFsdWUyKTtcbn07XG5cbnZhciBpc0VtcHR5ID0gZXhwb3J0cy5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSh2YWwpIHtcbiAgLy8gbnVsbCBvciB1bmRlZmluZWRcbiAgaWYgKHZhbCA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSByZXR1cm4gIXZhbDtcblxuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwubWVzc2FnZSA9PT0gJyc7XG5cbiAgc3dpdGNoIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgIC8vIFN0cmluZyBvciBBcnJheVxuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgY2FzZSAnW29iamVjdCBBcnJheV0nOlxuICAgICAgcmV0dXJuICF2YWwubGVuZ3RoO1xuXG4gICAgLy8gTWFwIG9yIFNldCBvciBGaWxlXG4gICAgY2FzZSAnW29iamVjdCBGaWxlXSc6XG4gICAgY2FzZSAnW29iamVjdCBNYXBdJzpcbiAgICBjYXNlICdbb2JqZWN0IFNldF0nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gIXZhbC5zaXplO1xuICAgICAgfVxuICAgIC8vIFBsYWluIE9iamVjdFxuICAgIGNhc2UgJ1tvYmplY3QgT2JqZWN0XSc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAhT2JqZWN0LmtleXModmFsKS5sZW5ndGg7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5mdW5jdGlvbiByYWZUaHJvdHRsZShmbikge1xuICB2YXIgbG9ja2VkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChsb2NrZWQpIHJldHVybjtcbiAgICBsb2NrZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKF8pIHtcbiAgICAgIGZuLmFwcGx5KF90aGlzLCBhcmdzKTtcbiAgICAgIGxvY2tlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvYmpUb0FycmF5KG9iaikge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICByZXR1cm4gaXNFbXB0eShvYmopID8gW10gOiBbb2JqXTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/util.js\n");

/***/ }),

/***/ "./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function () {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.delete = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function (target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function (target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\n");

/***/ })

}]);