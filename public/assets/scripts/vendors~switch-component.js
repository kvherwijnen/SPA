(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~switch-component"],{

/***/ "./node_modules/element-ui/lib/mixins/focus.js":
/*!*****************************************************!*\
  !*** ./node_modules/element-ui/lib/mixins/focus.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nexports.default = function (ref) {\n  return {\n    methods: {\n      focus: function focus() {\n        this.$refs[ref].focus();\n      }\n    }\n  };\n};\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvbWl4aW5zL2ZvY3VzLmpzPzEyZjIiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicmVmIiwibWV0aG9kcyIsImZvY3VzIiwiJHJlZnMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7O0FBRUFELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixVQUFVQyxHQUFWLEVBQWU7QUFDL0IsU0FBTztBQUNMQyxXQUFPLEVBQUU7QUFDUEMsV0FBSyxFQUFFLFNBQVNBLEtBQVQsR0FBaUI7QUFDdEIsYUFBS0MsS0FBTCxDQUFXSCxHQUFYLEVBQWdCRSxLQUFoQjtBQUNEO0FBSE07QUFESixHQUFQO0FBT0QsQ0FSRDs7QUFVQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9lbGVtZW50LXVpL2xpYi9taXhpbnMvZm9jdXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHJlZikge1xuICByZXR1cm4ge1xuICAgIG1ldGhvZHM6IHtcbiAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgdGhpcy4kcmVmc1tyZWZdLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/mixins/focus.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/switch.js":
/*!***********************************************!*\
  !*** ./node_modules/element-ui/lib/switch.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"/dist/\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 88);\n  /******/\n}(\n/************************************************************************/\n\n/******/\n{\n  /***/\n  0:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n    /* harmony export (binding) */\n\n    __webpack_require__.d(__webpack_exports__, \"a\", function () {\n      return normalizeComponent;\n    });\n    /* globals __VUE_SSR_CONTEXT__ */\n    // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n    // This module is a runtime utility for cleaner component module output and will\n    // be included in the final webpack user bundle.\n\n\n    function normalizeComponent(scriptExports, render, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier,\n    /* server only */\n    shadowMode\n    /* vue-cli only */\n    ) {\n      // Vue.extend constructor export interop\n      var options = typeof scriptExports === 'function' ? scriptExports.options : scriptExports; // render functions\n\n      if (render) {\n        options.render = render;\n        options.staticRenderFns = staticRenderFns;\n        options._compiled = true;\n      } // functional template\n\n\n      if (functionalTemplate) {\n        options.functional = true;\n      } // scopedId\n\n\n      if (scopeId) {\n        options._scopeId = 'data-v-' + scopeId;\n      }\n\n      var hook;\n\n      if (moduleIdentifier) {\n        // server build\n        hook = function (context) {\n          // 2.3 injection\n          context = context || // cached call\n          this.$vnode && this.$vnode.ssrContext || // stateful\n          this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n          // 2.2 with runInNewContext: true\n\n          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n            context = __VUE_SSR_CONTEXT__;\n          } // inject component styles\n\n\n          if (injectStyles) {\n            injectStyles.call(this, context);\n          } // register component module identifier for async chunk inferrence\n\n\n          if (context && context._registeredComponents) {\n            context._registeredComponents.add(moduleIdentifier);\n          }\n        }; // used by ssr in case component is cached and beforeCreate\n        // never gets called\n\n\n        options._ssrRegister = hook;\n      } else if (injectStyles) {\n        hook = shadowMode ? function () {\n          injectStyles.call(this, this.$root.$options.shadowRoot);\n        } : injectStyles;\n      }\n\n      if (hook) {\n        if (options.functional) {\n          // for template-only hot-reload because in that case the render fn doesn't\n          // go through the normalizer\n          options._injectStyles = hook; // register for functioal component in vue file\n\n          var originalRender = options.render;\n\n          options.render = function renderWithStyleInjection(h, context) {\n            hook.call(context);\n            return originalRender(h, context);\n          };\n        } else {\n          // inject component registration as beforeCreate hook\n          var existing = options.beforeCreate;\n          options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n        }\n      }\n\n      return {\n        exports: scriptExports,\n        options: options\n      };\n    }\n    /***/\n\n  },\n\n  /***/\n  11:\n  /***/\n  function (module, exports) {\n    module.exports = __webpack_require__(/*! element-ui/lib/mixins/migrating */ \"./node_modules/element-ui/lib/mixins/migrating.js\");\n    /***/\n  },\n\n  /***/\n  22:\n  /***/\n  function (module, exports) {\n    module.exports = __webpack_require__(/*! element-ui/lib/mixins/focus */ \"./node_modules/element-ui/lib/mixins/focus.js\");\n    /***/\n  },\n\n  /***/\n  4:\n  /***/\n  function (module, exports) {\n    module.exports = __webpack_require__(/*! element-ui/lib/mixins/emitter */ \"./node_modules/element-ui/lib/mixins/emitter.js\");\n    /***/\n  },\n\n  /***/\n  88:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/switch/src/component.vue?vue&type=template&id=2dcd8fbb&\n\n\n    var render = function () {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c(\"div\", {\n        staticClass: \"el-switch\",\n        class: {\n          \"is-disabled\": _vm.switchDisabled,\n          \"is-checked\": _vm.checked\n        },\n        attrs: {\n          role: \"switch\",\n          \"aria-checked\": _vm.checked,\n          \"aria-disabled\": _vm.switchDisabled\n        },\n        on: {\n          click: function ($event) {\n            $event.preventDefault();\n            return _vm.switchValue($event);\n          }\n        }\n      }, [_c(\"input\", {\n        ref: \"input\",\n        staticClass: \"el-switch__input\",\n        attrs: {\n          type: \"checkbox\",\n          id: _vm.id,\n          name: _vm.name,\n          \"true-value\": _vm.activeValue,\n          \"false-value\": _vm.inactiveValue,\n          disabled: _vm.switchDisabled\n        },\n        on: {\n          change: _vm.handleChange,\n          keydown: function ($event) {\n            if (!(\"button\" in $event) && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) {\n              return null;\n            }\n\n            return _vm.switchValue($event);\n          }\n        }\n      }), _vm.inactiveIconClass || _vm.inactiveText ? _c(\"span\", {\n        class: [\"el-switch__label\", \"el-switch__label--left\", !_vm.checked ? \"is-active\" : \"\"]\n      }, [_vm.inactiveIconClass ? _c(\"i\", {\n        class: [_vm.inactiveIconClass]\n      }) : _vm._e(), !_vm.inactiveIconClass && _vm.inactiveText ? _c(\"span\", {\n        attrs: {\n          \"aria-hidden\": _vm.checked\n        }\n      }, [_vm._v(_vm._s(_vm.inactiveText))]) : _vm._e()]) : _vm._e(), _c(\"span\", {\n        ref: \"core\",\n        staticClass: \"el-switch__core\",\n        style: {\n          width: _vm.coreWidth + \"px\"\n        }\n      }), _vm.activeIconClass || _vm.activeText ? _c(\"span\", {\n        class: [\"el-switch__label\", \"el-switch__label--right\", _vm.checked ? \"is-active\" : \"\"]\n      }, [_vm.activeIconClass ? _c(\"i\", {\n        class: [_vm.activeIconClass]\n      }) : _vm._e(), !_vm.activeIconClass && _vm.activeText ? _c(\"span\", {\n        attrs: {\n          \"aria-hidden\": !_vm.checked\n        }\n      }, [_vm._v(_vm._s(_vm.activeText))]) : _vm._e()]) : _vm._e()]);\n    };\n\n    var staticRenderFns = [];\n    render._withStripped = true; // CONCATENATED MODULE: ./packages/switch/src/component.vue?vue&type=template&id=2dcd8fbb&\n    // EXTERNAL MODULE: external \"element-ui/lib/mixins/emitter\"\n\n    var emitter_ = __webpack_require__(4);\n\n    var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_); // EXTERNAL MODULE: external \"element-ui/lib/mixins/focus\"\n\n\n    var focus_ = __webpack_require__(22);\n\n    var focus_default = /*#__PURE__*/__webpack_require__.n(focus_); // EXTERNAL MODULE: external \"element-ui/lib/mixins/migrating\"\n\n\n    var migrating_ = __webpack_require__(11);\n\n    var migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_); // CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/switch/src/component.vue?vue&type=script&lang=js&\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\n    /* harmony default export */\n\n\n    var componentvue_type_script_lang_js_ = {\n      name: 'ElSwitch',\n      mixins: [focus_default()('input'), migrating_default.a, emitter_default.a],\n      inject: {\n        elForm: {\n          default: ''\n        }\n      },\n      props: {\n        value: {\n          type: [Boolean, String, Number],\n          default: false\n        },\n        disabled: {\n          type: Boolean,\n          default: false\n        },\n        width: {\n          type: Number,\n          default: 40\n        },\n        activeIconClass: {\n          type: String,\n          default: ''\n        },\n        inactiveIconClass: {\n          type: String,\n          default: ''\n        },\n        activeText: String,\n        inactiveText: String,\n        activeColor: {\n          type: String,\n          default: ''\n        },\n        inactiveColor: {\n          type: String,\n          default: ''\n        },\n        activeValue: {\n          type: [Boolean, String, Number],\n          default: true\n        },\n        inactiveValue: {\n          type: [Boolean, String, Number],\n          default: false\n        },\n        name: {\n          type: String,\n          default: ''\n        },\n        validateEvent: {\n          type: Boolean,\n          default: true\n        },\n        id: String\n      },\n      data: function data() {\n        return {\n          coreWidth: this.width\n        };\n      },\n      created: function created() {\n        if (!~[this.activeValue, this.inactiveValue].indexOf(this.value)) {\n          this.$emit('input', this.inactiveValue);\n        }\n      },\n      computed: {\n        checked: function checked() {\n          return this.value === this.activeValue;\n        },\n        switchDisabled: function switchDisabled() {\n          return this.disabled || (this.elForm || {}).disabled;\n        }\n      },\n      watch: {\n        checked: function checked() {\n          this.$refs.input.checked = this.checked;\n\n          if (this.activeColor || this.inactiveColor) {\n            this.setBackgroundColor();\n          }\n\n          if (this.validateEvent) {\n            this.dispatch('ElFormItem', 'el.form.change', [this.value]);\n          }\n        }\n      },\n      methods: {\n        handleChange: function handleChange(event) {\n          var _this = this;\n\n          var val = this.checked ? this.inactiveValue : this.activeValue;\n          this.$emit('input', val);\n          this.$emit('change', val);\n          this.$nextTick(function () {\n            // set input's checked property\n            // in case parent refuses to change component's value\n            _this.$refs.input.checked = _this.checked;\n          });\n        },\n        setBackgroundColor: function setBackgroundColor() {\n          var newColor = this.checked ? this.activeColor : this.inactiveColor;\n          this.$refs.core.style.borderColor = newColor;\n          this.$refs.core.style.backgroundColor = newColor;\n        },\n        switchValue: function switchValue() {\n          !this.switchDisabled && this.handleChange();\n        },\n        getMigratingConfig: function getMigratingConfig() {\n          return {\n            props: {\n              'on-color': 'on-color is renamed to active-color.',\n              'off-color': 'off-color is renamed to inactive-color.',\n              'on-text': 'on-text is renamed to active-text.',\n              'off-text': 'off-text is renamed to inactive-text.',\n              'on-value': 'on-value is renamed to active-value.',\n              'off-value': 'off-value is renamed to inactive-value.',\n              'on-icon-class': 'on-icon-class is renamed to active-icon-class.',\n              'off-icon-class': 'off-icon-class is renamed to inactive-icon-class.'\n            }\n          };\n        }\n      },\n      mounted: function mounted() {\n        /* istanbul ignore if */\n        this.coreWidth = this.width || 40;\n\n        if (this.activeColor || this.inactiveColor) {\n          this.setBackgroundColor();\n        }\n\n        this.$refs.input.checked = this.checked;\n      }\n    }; // CONCATENATED MODULE: ./packages/switch/src/component.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var src_componentvue_type_script_lang_js_ = componentvue_type_script_lang_js_; // EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n\n    var componentNormalizer = __webpack_require__(0); // CONCATENATED MODULE: ./packages/switch/src/component.vue\n\n    /* normalize component */\n\n\n    var component = Object(componentNormalizer[\"a\"\n    /* default */\n    ])(src_componentvue_type_script_lang_js_, render, staticRenderFns, false, null, null, null);\n    /* hot reload */\n\n    if (false) { var api; }\n\n    component.options.__file = \"packages/switch/src/component.vue\";\n    /* harmony default export */\n\n    var src_component = component.exports; // CONCATENATED MODULE: ./packages/switch/index.js\n\n    /* istanbul ignore next */\n\n    src_component.install = function (Vue) {\n      Vue.component(src_component.name, src_component);\n    };\n    /* harmony default export */\n\n\n    var packages_switch = __webpack_exports__[\"default\"] = src_component;\n    /***/\n  }\n  /******/\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/switch.js\n");

/***/ })

}]);