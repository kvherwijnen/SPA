(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~icon-holder-component"],{

/***/ "./node_modules/element-ui/lib/avatar.js":
/*!***********************************************!*\
  !*** ./node_modules/element-ui/lib/avatar.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"/dist/\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 125);\n  /******/\n}(\n/************************************************************************/\n\n/******/\n{\n  /***/\n  0:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n    /* harmony export (binding) */\n\n    __webpack_require__.d(__webpack_exports__, \"a\", function () {\n      return normalizeComponent;\n    });\n    /* globals __VUE_SSR_CONTEXT__ */\n    // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n    // This module is a runtime utility for cleaner component module output and will\n    // be included in the final webpack user bundle.\n\n\n    function normalizeComponent(scriptExports, render, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier,\n    /* server only */\n    shadowMode\n    /* vue-cli only */\n    ) {\n      // Vue.extend constructor export interop\n      var options = typeof scriptExports === 'function' ? scriptExports.options : scriptExports; // render functions\n\n      if (render) {\n        options.render = render;\n        options.staticRenderFns = staticRenderFns;\n        options._compiled = true;\n      } // functional template\n\n\n      if (functionalTemplate) {\n        options.functional = true;\n      } // scopedId\n\n\n      if (scopeId) {\n        options._scopeId = 'data-v-' + scopeId;\n      }\n\n      var hook;\n\n      if (moduleIdentifier) {\n        // server build\n        hook = function (context) {\n          // 2.3 injection\n          context = context || // cached call\n          this.$vnode && this.$vnode.ssrContext || // stateful\n          this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n          // 2.2 with runInNewContext: true\n\n          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n            context = __VUE_SSR_CONTEXT__;\n          } // inject component styles\n\n\n          if (injectStyles) {\n            injectStyles.call(this, context);\n          } // register component module identifier for async chunk inferrence\n\n\n          if (context && context._registeredComponents) {\n            context._registeredComponents.add(moduleIdentifier);\n          }\n        }; // used by ssr in case component is cached and beforeCreate\n        // never gets called\n\n\n        options._ssrRegister = hook;\n      } else if (injectStyles) {\n        hook = shadowMode ? function () {\n          injectStyles.call(this, this.$root.$options.shadowRoot);\n        } : injectStyles;\n      }\n\n      if (hook) {\n        if (options.functional) {\n          // for template-only hot-reload because in that case the render fn doesn't\n          // go through the normalizer\n          options._injectStyles = hook; // register for functioal component in vue file\n\n          var originalRender = options.render;\n\n          options.render = function renderWithStyleInjection(h, context) {\n            hook.call(context);\n            return originalRender(h, context);\n          };\n        } else {\n          // inject component registration as beforeCreate hook\n          var existing = options.beforeCreate;\n          options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n        }\n      }\n\n      return {\n        exports: scriptExports,\n        options: options\n      };\n    }\n    /***/\n\n  },\n\n  /***/\n  125:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/avatar/src/main.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n\n    var mainvue_type_script_lang_js_ = {\n      name: 'ElAvatar',\n      props: {\n        size: {\n          type: [Number, String],\n          validator: function validator(val) {\n            if (typeof val === 'string') {\n              return ['large', 'medium', 'small'].includes(val);\n            }\n\n            return typeof val === 'number';\n          }\n        },\n        shape: {\n          type: String,\n          default: 'circle',\n          validator: function validator(val) {\n            return ['circle', 'square'].includes(val);\n          }\n        },\n        icon: String,\n        src: String,\n        alt: String,\n        srcSet: String,\n        error: Function,\n        fit: {\n          type: String,\n          default: 'cover'\n        }\n      },\n      data: function data() {\n        return {\n          isImageExist: true\n        };\n      },\n      computed: {\n        avatarClass: function avatarClass() {\n          var size = this.size,\n              icon = this.icon,\n              shape = this.shape;\n          var classList = ['el-avatar'];\n\n          if (size && typeof size === 'string') {\n            classList.push('el-avatar--' + size);\n          }\n\n          if (icon) {\n            classList.push('el-avatar--icon');\n          }\n\n          if (shape) {\n            classList.push('el-avatar--' + shape);\n          }\n\n          return classList.join(' ');\n        }\n      },\n      methods: {\n        handleError: function handleError() {\n          var error = this.error;\n          var errorFlag = error ? error() : undefined;\n\n          if (errorFlag !== false) {\n            this.isImageExist = false;\n          }\n        },\n        renderAvatar: function renderAvatar() {\n          var h = this.$createElement;\n          var icon = this.icon,\n              src = this.src,\n              alt = this.alt,\n              isImageExist = this.isImageExist,\n              srcSet = this.srcSet,\n              fit = this.fit;\n\n          if (isImageExist && src) {\n            return h('img', {\n              attrs: {\n                src: src,\n                alt: alt,\n                srcSet: srcSet\n              },\n              on: {\n                'error': this.handleError\n              },\n              style: {\n                'object-fit': fit\n              }\n            });\n          }\n\n          if (icon) {\n            return h('i', {\n              'class': icon\n            });\n          }\n\n          return this.$slots.default;\n        }\n      },\n      render: function render() {\n        var h = arguments[0];\n        var avatarClass = this.avatarClass,\n            size = this.size;\n        var sizeStyle = typeof size === 'number' ? {\n          height: size + 'px',\n          width: size + 'px',\n          lineHeight: size + 'px'\n        } : {};\n        return h('span', {\n          'class': avatarClass,\n          style: sizeStyle\n        }, [this.renderAvatar()]);\n      }\n    }; // CONCATENATED MODULE: ./packages/avatar/src/main.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_; // EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n\n    var componentNormalizer = __webpack_require__(0); // CONCATENATED MODULE: ./packages/avatar/src/main.vue\n\n\n    var render, staticRenderFns;\n    /* normalize component */\n\n    var component = Object(componentNormalizer[\"a\"\n    /* default */\n    ])(src_mainvue_type_script_lang_js_, render, staticRenderFns, false, null, null, null);\n    /* hot reload */\n\n    if (false) { var api; }\n\n    component.options.__file = \"packages/avatar/src/main.vue\";\n    /* harmony default export */\n\n    var main = component.exports; // CONCATENATED MODULE: ./packages/avatar/index.js\n\n    /* istanbul ignore next */\n\n    main.install = function (Vue) {\n      Vue.component(main.name, main);\n    };\n    /* harmony default export */\n\n\n    var avatar = __webpack_exports__[\"default\"] = main;\n    /***/\n  }\n  /******/\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/avatar.js\n");

/***/ })

}]);