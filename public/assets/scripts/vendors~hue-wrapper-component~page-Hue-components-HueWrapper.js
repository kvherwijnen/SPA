(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~hue-wrapper-component~page-Hue-components-HueWrapper"],{

/***/ "./node_modules/tinycolor2/tinycolor.js":
/*!**********************************************!*\
  !*** ./node_modules/tinycolor2/tinycolor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n(function (Math) {\n  var trimLeft = /^\\s+/,\n      trimRight = /\\s+$/,\n      tinyCounter = 0,\n      mathRound = Math.round,\n      mathMin = Math.min,\n      mathMax = Math.max,\n      mathRandom = Math.random;\n\n  function tinycolor(color, opts) {\n    color = color ? color : '';\n    opts = opts || {}; // If input is already a tinycolor, return itself\n\n    if (color instanceof tinycolor) {\n      return color;\n    } // If we are called as a function, call using new instead\n\n\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\n    if (this._r < 1) {\n      this._r = mathRound(this._r);\n    }\n\n    if (this._g < 1) {\n      this._g = mathRound(this._g);\n    }\n\n    if (this._b < 1) {\n      this._b = mathRound(this._b);\n    }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n  }\n\n  tinycolor.prototype = {\n    isDark: function () {\n      return this.getBrightness() < 128;\n    },\n    isLight: function () {\n      return !this.isDark();\n    },\n    isValid: function () {\n      return this._ok;\n    },\n    getOriginalInput: function () {\n      return this._originalInput;\n    },\n    getFormat: function () {\n      return this._format;\n    },\n    getAlpha: function () {\n      return this._a;\n    },\n    getBrightness: function () {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function () {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n\n      if (RsRGB <= 0.03928) {\n        R = RsRGB / 12.92;\n      } else {\n        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (GsRGB <= 0.03928) {\n        G = GsRGB / 12.92;\n      } else {\n        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (BsRGB <= 0.03928) {\n        B = BsRGB / 12.92;\n      } else {\n        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function (value) {\n      this._a = boundAlpha(value);\n      this._roundA = mathRound(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function () {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function () {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = mathRound(hsv.h * 360),\n          s = mathRound(hsv.s * 100),\n          v = mathRound(hsv.v * 100);\n      return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function () {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function () {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = mathRound(hsl.h * 360),\n          s = mathRound(hsl.s * 100),\n          l = mathRound(hsl.l * 100);\n      return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function (allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function (allow3Char) {\n      return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function (allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function (allow4Char) {\n      return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function () {\n      return {\n        r: mathRound(this._r),\n        g: mathRound(this._g),\n        b: mathRound(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function () {\n      return this._a == 1 ? \"rgb(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" : \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function () {\n      return {\n        r: mathRound(bound01(this._r, 255) * 100) + \"%\",\n        g: mathRound(bound01(this._g, 255) * 100) + \"%\",\n        b: mathRound(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function () {\n      return this._a == 1 ? \"rgb(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function () {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n\n      if (this._a < 1) {\n        return false;\n      }\n\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function (secondColor) {\n      var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n\n      return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n    },\n    toString: function (format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n\n        return this.toRgbString();\n      }\n\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n\n      return formattedString || this.toHexString();\n    },\n    clone: function () {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function (fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function () {\n      return this._applyModification(lighten, arguments);\n    },\n    brighten: function () {\n      return this._applyModification(brighten, arguments);\n    },\n    darken: function () {\n      return this._applyModification(darken, arguments);\n    },\n    desaturate: function () {\n      return this._applyModification(desaturate, arguments);\n    },\n    saturate: function () {\n      return this._applyModification(saturate, arguments);\n    },\n    greyscale: function () {\n      return this._applyModification(greyscale, arguments);\n    },\n    spin: function () {\n      return this._applyModification(spin, arguments);\n    },\n    _applyCombination: function (fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function () {\n      return this._applyCombination(analogous, arguments);\n    },\n    complement: function () {\n      return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function () {\n      return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function () {\n      return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function () {\n      return this._applyCombination(triad, arguments);\n    },\n    tetrad: function () {\n      return this._applyCombination(tetrad, arguments);\n    }\n  }; // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n\n  tinycolor.fromRatio = function (color, opts) {\n    if (typeof color == \"object\") {\n      var newColor = {};\n\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n\n      color = newColor;\n    }\n\n    return tinycolor(color, opts);\n  }; // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n\n\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: mathMin(255, mathMax(rgb.r, 0)),\n      g: mathMin(255, mathMax(rgb.g, 0)),\n      b: mathMin(255, mathMax(rgb.b, 0)),\n      a: a\n    };\n  } // Conversion Functions\n  // --------------------\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n\n\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  } // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n\n\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        l = (max + min) / 2;\n\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  } // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n\n\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  } // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n\n\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible\n\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n  } // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n\n\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible\n\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n  } // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n\n\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];\n    return hex.join(\"\");\n  } // `equals`\n  // Can be called with any tinycolor input\n\n\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) {\n      return false;\n    }\n\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: mathRandom(),\n      g: mathRandom(),\n      b: mathRandom()\n    });\n  }; // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n\n  function desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n\n  function lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  function brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n\n  function darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n\n\n  function spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  } // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n\n  function complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n\n  function triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 120) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 240) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 90) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 180) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 270) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n\n    return ret;\n  }\n\n  function monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n        s = hsv.s,\n        v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n\n    return ret;\n  } // Utility Functions\n  // ---------------------\n\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  }; // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\n\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  }; // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n\n\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n\n    return out;\n  }; // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n\n\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      \"level\": level,\n      \"size\": size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  }; // Big List of Colors\n  // ------------------\n  // <http://www.w3.org/TR/css3-color/#svg-color>\n\n\n  var names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n  }; // Make it easy to access colors via `hexNames[hex]`\n\n  var hexNames = tinycolor.hexNames = flip(names); // Utilities\n  // ---------\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n\n  function flip(o) {\n    var flipped = {};\n\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n\n    return flipped;\n  } // Return a valid alpha value [0,1] with all invalid values being set to 1\n\n\n  function boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n\n    return a;\n  } // Take input from [0, n] and return it as [0, 1]\n\n\n  function bound01(n, max) {\n    if (isOnePointZero(n)) {\n      n = \"100%\";\n    }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number\n\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    } // Handle floating point rounding errors\n\n\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    } // Convert into [0, 1] range if it isn't already\n\n\n    return n % max / parseFloat(max);\n  } // Force a number between 0 and 1\n\n\n  function clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n  } // Parse a base-16 hex value into a base-10 integer\n\n\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\n\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n  } // Check to see if string passed in is a percentage\n\n\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n  } // Force a hex value to have 2 characters\n\n\n  function pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n  } // Replace a decimal with it's percentage value\n\n\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n\n    return n;\n  } // Converts a decimal to a hex value\n\n\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  } // Converts a hex value to a decimal\n\n\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\"; // <http://www.w3.org/TR/css3-values/#number-value>\n\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\"; // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }(); // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n\n\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  } // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\n\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n    var named = false;\n\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == 'transparent') {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n      };\n    } // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\n\n    var match;\n\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + '' + match[1]),\n        g: parseIntFromHex(match[2] + '' + match[2]),\n        b: parseIntFromHex(match[3] + '' + match[3]),\n        a: convertHexToDecimal(match[4] + '' + match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + '' + match[1]),\n        g: parseIntFromHex(match[2] + '' + match[2]),\n        b: parseIntFromHex(match[3] + '' + match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n\n    return false;\n  }\n\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\n      \"level\": \"AA\",\n      \"size\": \"small\"\n    };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n\n    return {\n      \"level\": level,\n      \"size\": size\n    };\n  } // Node: Export function\n\n\n  if ( true && module.exports) {\n    module.exports = tinycolor;\n  } // AMD/requirejs: Define the module\n  else if (true) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return tinycolor;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } // Browser: Expose to window\n    else {}\n})(Math);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tinycolor2/tinycolor.js\n");

/***/ }),

/***/ "./node_modules/tinygradient/browser.js":
/*!**********************************************!*\
  !*** ./node_modules/tinygradient/browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * tinygradient (v1.1.2)\n * @copyright 2014-2020 Damien \"Mistic\" Sorel <contact@git.strangeplanet.fr>\n * @licence MIT\n */\n(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! tinycolor2 */ \"./node_modules/tinycolor2/tinycolor.js\")) : undefined;\n})(this, function (tinycolor2) {\n  'use strict';\n\n  tinycolor2 = tinycolor2 && tinycolor2.hasOwnProperty('default') ? tinycolor2['default'] : tinycolor2;\n  /**\n   * @typedef {Object} TinyGradient.StopInput\n   * @property {ColorInput} color\n   * @property {number} pos\n   */\n\n  /**\n   * @typedef {Object} TinyGradient.StepValue\n   * @type {number} [r]\n   * @type {number} [g]\n   * @type {number} [b]\n   * @type {number} [h]\n   * @type {number} [s]\n   * @type {number} [v]\n   * @type {number} [a]\n   */\n\n  /**\n   * @type {StepValue}\n   */\n\n  var RGBA_MAX = {\n    r: 256,\n    g: 256,\n    b: 256,\n    a: 1\n  };\n  /**\n   * @type {StepValue}\n   */\n\n  var HSVA_MAX = {\n    h: 360,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  /**\n   * Linearly compute the step size between start and end (not normalized)\n   * @param {StepValue} start\n   * @param {StepValue} end\n   * @param {number} steps - number of desired steps\n   * @return {StepValue}\n   */\n\n  function stepize(start, end, steps) {\n    var step = {};\n\n    for (var k in start) {\n      if (start.hasOwnProperty(k)) {\n        step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;\n      }\n    }\n\n    return step;\n  }\n  /**\n   * Compute the final step color\n   * @param {StepValue} step - from `stepize`\n   * @param {StepValue} start\n   * @param {number} i - color index\n   * @param {StepValue} max - rgba or hsva of maximum values for each channel\n   * @return {StepValue}\n   */\n\n\n  function interpolate(step, start, i, max) {\n    var color = {};\n\n    for (var k in start) {\n      if (start.hasOwnProperty(k)) {\n        color[k] = step[k] * i + start[k];\n        color[k] = color[k] < 0 ? color[k] + max[k] : max[k] !== 1 ? color[k] % max[k] : color[k];\n      }\n    }\n\n    return color;\n  }\n  /**\n   * Generate gradient with RGBa interpolation\n   * @param {StopInput} stop1\n   * @param {StopInput} stop2\n   * @param {number} steps\n   * @return {tinycolor[]} color1 included, color2 excluded\n   */\n\n\n  function interpolateRgb(stop1, stop2, steps) {\n    var start = stop1.color.toRgb();\n    var end = stop2.color.toRgb();\n    var step = stepize(start, end, steps);\n    var gradient = [stop1.color];\n\n    for (var i = 1; i < steps; i++) {\n      var color = interpolate(step, start, i, RGBA_MAX);\n      gradient.push(tinycolor2(color));\n    }\n\n    return gradient;\n  }\n  /**\n   * Generate gradient with HSVa interpolation\n   * @param {StopInput} stop1\n   * @param {StopInput} stop2\n   * @param {number} steps\n   * @param {boolean|'long'|'short'} mode\n   * @return {tinycolor[]} color1 included, color2 excluded\n   */\n\n\n  function interpolateHsv(stop1, stop2, steps, mode) {\n    var start = stop1.color.toHsv();\n    var end = stop2.color.toHsv(); // rgb interpolation if one of the steps in grayscale\n\n    if (start.s === 0 || end.s === 0) {\n      return interpolateRgb(stop1, stop2, steps);\n    }\n\n    var trigonometric;\n\n    if (typeof mode === 'boolean') {\n      trigonometric = mode;\n    } else {\n      var trigShortest = start.h < end.h && end.h - start.h < 180 || start.h > end.h && start.h - end.h > 180;\n      trigonometric = mode === 'long' && trigShortest || mode === 'short' && !trigShortest;\n    }\n\n    var step = stepize(start, end, steps);\n    var gradient = [stop1.color]; // recompute hue\n\n    var diff;\n\n    if (start.h <= end.h && !trigonometric || start.h >= end.h && trigonometric) {\n      diff = end.h - start.h;\n    } else if (trigonometric) {\n      diff = 360 - end.h + start.h;\n    } else {\n      diff = 360 - start.h + end.h;\n    }\n\n    step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;\n\n    for (var i = 1; i < steps; i++) {\n      var color = interpolate(step, start, i, HSVA_MAX);\n      gradient.push(tinycolor2(color));\n    }\n\n    return gradient;\n  }\n  /**\n   * Compute substeps between each stops\n   * @param {StopInput[]} stops\n   * @param {number} steps\n   * @return {number[]}\n   */\n\n\n  function computeSubsteps(stops, steps) {\n    var l = stops.length; // validation\n\n    steps = parseInt(steps, 10);\n\n    if (isNaN(steps) || steps < 2) {\n      throw new Error('Invalid number of steps (< 2)');\n    }\n\n    if (steps < l) {\n      throw new Error('Number of steps cannot be inferior to number of stops');\n    } // compute substeps from stop positions\n\n\n    var substeps = [];\n\n    for (var i = 1; i < l; i++) {\n      var step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);\n      substeps.push(Math.max(1, Math.round(step)));\n    } // adjust number of steps\n\n\n    var totalSubsteps = 1;\n\n    for (var n = l - 1; n--;) {\n      totalSubsteps += substeps[n];\n    }\n\n    while (totalSubsteps !== steps) {\n      if (totalSubsteps < steps) {\n        var min = Math.min.apply(null, substeps);\n        substeps[substeps.indexOf(min)]++;\n        totalSubsteps++;\n      } else {\n        var max = Math.max.apply(null, substeps);\n        substeps[substeps.indexOf(max)]--;\n        totalSubsteps--;\n      }\n    }\n\n    return substeps;\n  }\n  /**\n   * Compute the color at a specific position\n   * @param {StopInput[]} stops\n   * @param {number} pos\n   * @param {string} method\n   * @param {StepValue} max\n   * @returns {tinycolor}\n   */\n\n\n  function computeAt(stops, pos, method, max) {\n    if (pos < 0 || pos > 1) {\n      throw new Error('Position must be between 0 and 1');\n    }\n\n    var start, end;\n\n    for (var i = 0, l = stops.length; i < l - 1; i++) {\n      if (pos >= stops[i].pos && pos < stops[i + 1].pos) {\n        start = stops[i];\n        end = stops[i + 1];\n        break;\n      }\n    }\n\n    if (!start) {\n      start = end = stops[stops.length - 1];\n    }\n\n    var step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);\n    var color = interpolate(step, start.color[method](), Math.round((pos - start.pos) * 100), max);\n    return tinycolor2(color);\n  }\n\n  var TinyGradient = /*#__PURE__*/function () {\n    /**\n     * @param {StopInput[]|ColorInput[]} stops\n     * @returns {TinyGradient}\n     */\n    function TinyGradient(stops) {\n      // validation\n      if (stops.length < 2) {\n        throw new Error('Invalid number of stops (< 2)');\n      }\n\n      var havingPositions = stops[0].pos !== undefined;\n      var l = stops.length;\n      var p = -1;\n      var lastColorLess = false; // create tinycolor objects and clean positions\n\n      this.stops = stops.map(function (stop, i) {\n        var hasPosition = stop.pos !== undefined;\n\n        if (havingPositions ^ hasPosition) {\n          throw new Error('Cannot mix positionned and not posionned color stops');\n        }\n\n        if (hasPosition) {\n          var hasColor = stop.color !== undefined;\n\n          if (!hasColor && (lastColorLess || i === 0 || i === l - 1)) {\n            throw new Error('Cannot define two consecutive position-only stops');\n          }\n\n          lastColorLess = !hasColor;\n          stop = {\n            color: hasColor ? tinycolor2(stop.color) : null,\n            colorLess: !hasColor,\n            pos: stop.pos\n          };\n\n          if (stop.pos < 0 || stop.pos > 1) {\n            throw new Error('Color stops positions must be between 0 and 1');\n          } else if (stop.pos <= p) {\n            throw new Error('Color stops positions are not ordered');\n          }\n\n          p = stop.pos;\n        } else {\n          stop = {\n            color: tinycolor2(stop.color !== undefined ? stop.color : stop),\n            pos: i / (l - 1)\n          };\n        }\n\n        return stop;\n      });\n\n      if (this.stops[0].pos !== 0) {\n        this.stops.unshift({\n          color: this.stops[0].color,\n          pos: 0\n        });\n        l++;\n      }\n\n      if (this.stops[l - 1].pos !== 1) {\n        this.stops.push({\n          color: this.stops[l - 1].color,\n          pos: 1\n        });\n      }\n    }\n    /**\n     * Return new instance with reversed stops\n     * @return {TinyGradient}\n     */\n\n\n    var _proto = TinyGradient.prototype;\n\n    _proto.reverse = function reverse() {\n      var stops = [];\n      this.stops.forEach(function (stop) {\n        stops.push({\n          color: stop.color,\n          pos: 1 - stop.pos\n        });\n      });\n      return new TinyGradient(stops.reverse());\n    }\n    /**\n     * Return new instance with looped stops\n     * @return {TinyGradient}\n     */\n    ;\n\n    _proto.loop = function loop() {\n      var stops1 = [];\n      var stops2 = [];\n      this.stops.forEach(function (stop) {\n        stops1.push({\n          color: stop.color,\n          pos: stop.pos / 2\n        });\n      });\n      this.stops.slice(0, -1).forEach(function (stop) {\n        stops2.push({\n          color: stop.color,\n          pos: 1 - stop.pos / 2\n        });\n      });\n      return new TinyGradient(stops1.concat(stops2.reverse()));\n    }\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {number} steps\n     * @return {tinycolor[]}\n     */\n    ;\n\n    _proto.rgb = function rgb(steps) {\n      var _this = this;\n\n      var substeps = computeSubsteps(this.stops, steps);\n      var gradient = [];\n      this.stops.forEach(function (stop, i) {\n        if (stop.colorLess) {\n          stop.color = interpolateRgb(_this.stops[i - 1], _this.stops[i + 1], 2)[1];\n        }\n      });\n\n      for (var i = 0, l = this.stops.length; i < l - 1; i++) {\n        var rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);\n        gradient.splice.apply(gradient, [gradient.length, 0].concat(rgb));\n      }\n\n      gradient.push(this.stops[this.stops.length - 1].color);\n      return gradient;\n    }\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {number} steps\n     * @param {boolean|'long'|'short'} [mode=false]\n     *    - false to step in clockwise\n     *    - true to step in trigonometric order\n     *    - 'short' to use the shortest way\n     *    - 'long' to use the longest way\n     * @return {tinycolor[]}\n     */\n    ;\n\n    _proto.hsv = function hsv(steps, mode) {\n      var _this2 = this;\n\n      var substeps = computeSubsteps(this.stops, steps);\n      var gradient = [];\n      this.stops.forEach(function (stop, i) {\n        if (stop.colorLess) {\n          stop.color = interpolateHsv(_this2.stops[i - 1], _this2.stops[i + 1], 2, mode)[1];\n        }\n      });\n\n      for (var i = 0, l = this.stops.length; i < l - 1; i++) {\n        var hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], mode);\n        gradient.splice.apply(gradient, [gradient.length, 0].concat(hsv));\n      }\n\n      gradient.push(this.stops[this.stops.length - 1].color);\n      return gradient;\n    }\n    /**\n     * Generate CSS3 command (no prefix) for this gradient\n     * @param {String} [mode=linear] - 'linear' or 'radial'\n     * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n     * @return {String}\n     */\n    ;\n\n    _proto.css = function css(mode, direction) {\n      mode = mode || 'linear';\n      direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');\n      var css = mode + '-gradient(' + direction;\n      this.stops.forEach(function (stop) {\n        css += ', ' + (stop.colorLess ? '' : stop.color.toRgbString() + ' ') + stop.pos * 100 + '%';\n      });\n      css += ')';\n      return css;\n    }\n    /**\n     * Returns the color at specific position with RGBa interpolation\n     * @param {number} pos, between 0 and 1\n     * @return {tinycolor}\n     */\n    ;\n\n    _proto.rgbAt = function rgbAt(pos) {\n      return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);\n    }\n    /**\n     * Returns the color at specific position with HSVa interpolation\n     * @param {number} pos, between 0 and 1\n     * @return {tinycolor}\n     */\n    ;\n\n    _proto.hsvAt = function hsvAt(pos) {\n      return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);\n    };\n\n    return TinyGradient;\n  }();\n  /**\n   * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops\n   * @returns {TinyGradient}\n   */\n\n\n  var tinygradient = function tinygradient(stops) {\n    // varargs\n    if (arguments.length === 1) {\n      if (!(arguments[0] instanceof Array)) {\n        throw new Error('\"stops\" is not an array');\n      }\n\n      stops = arguments[0];\n    } else {\n      stops = Array.prototype.slice.call(arguments);\n    }\n\n    return new TinyGradient(stops);\n  };\n\n  return tinygradient;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguanM/MDQ5NyJdLCJuYW1lcyI6WyJSR0JBX01BWCIsInIiLCJnIiwiYiIsImEiLCJIU1ZBX01BWCIsImgiLCJzIiwidiIsInN0ZXAiLCJzdGFydCIsInN0ZXBzIiwiZW5kIiwiY29sb3IiLCJtYXgiLCJzdG9wMSIsInN0b3AyIiwic3RlcGl6ZSIsImdyYWRpZW50IiwiaSIsImludGVycG9sYXRlIiwidGlueWNvbG9yIiwiaW50ZXJwb2xhdGVSZ2IiLCJ0cmlnb25vbWV0cmljIiwidHJpZ1Nob3J0ZXN0IiwibW9kZSIsImRpZmYiLCJNYXRoIiwibCIsInN0b3BzIiwicGFyc2VJbnQiLCJpc05hTiIsInN1YnN0ZXBzIiwidG90YWxTdWJzdGVwcyIsIm4iLCJtaW4iLCJwb3MiLCJUaW55R3JhZGllbnQiLCJoYXZpbmdQb3NpdGlvbnMiLCJwIiwibGFzdENvbG9yTGVzcyIsImhhc1Bvc2l0aW9uIiwic3RvcCIsImhhc0NvbG9yIiwiY29sb3JMZXNzIiwicmV2ZXJzZSIsImxvb3AiLCJzdG9wczEiLCJzdG9wczIiLCJyZ2IiLCJjb21wdXRlU3Vic3RlcHMiLCJoc3YiLCJpbnRlcnBvbGF0ZUhzdiIsImNzcyIsImRpcmVjdGlvbiIsInJnYkF0IiwiY29tcHV0ZUF0IiwiaHN2QXQiLCJhcmd1bWVudHMiLCJBcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBLE1BQU1BLFFBQVEsR0FBRztBQUFFQyxLQUFDLEVBQUg7QUFBVUMsS0FBQyxFQUFYO0FBQWtCQyxLQUFDLEVBQW5CO0FBQTBCQyxLQUFDLEVBQUU7QUFBN0IsR0FBakI7Ozs7O0FBS0EsTUFBTUMsUUFBUSxHQUFHO0FBQUVDLEtBQUMsRUFBSDtBQUFVQyxLQUFDLEVBQVg7QUFBZ0JDLEtBQUMsRUFBakI7QUFBc0JKLEtBQUMsRUFBRTtBQUF6QixHQUFqQjs7Ozs7Ozs7O0FBU0Esc0NBQW9DO0FBQ2hDLFFBQUlLLElBQUks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LEtBQUssQ0FBTEEscUJBQVI5QixTQUFROEIsQ0FBUjlCO0FBQ0g7O0FBRUQsV0FBTyxpQkFBUCxLQUFPLENBQVA7QUFaSiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW55Z3JhZGllbnQvYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRpbnljb2xvciA9IHJlcXVpcmUoJ3Rpbnljb2xvcjInKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUaW55R3JhZGllbnQuU3RvcElucHV0XG4gKiBAcHJvcGVydHkge0NvbG9ySW5wdXR9IGNvbG9yXG4gKiBAcHJvcGVydHkge251bWJlcn0gcG9zXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUaW55R3JhZGllbnQuU3RlcFZhbHVlXG4gKiBAdHlwZSB7bnVtYmVyfSBbcl1cbiAqIEB0eXBlIHtudW1iZXJ9IFtnXVxuICogQHR5cGUge251bWJlcn0gW2JdXG4gKiBAdHlwZSB7bnVtYmVyfSBbaF1cbiAqIEB0eXBlIHtudW1iZXJ9IFtzXVxuICogQHR5cGUge251bWJlcn0gW3ZdXG4gKiBAdHlwZSB7bnVtYmVyfSBbYV1cbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtTdGVwVmFsdWV9XG4gKi9cbmNvbnN0IFJHQkFfTUFYID0geyByOiAyNTYsIGc6IDI1NiwgYjogMjU2LCBhOiAxIH07XG5cbi8qKlxuICogQHR5cGUge1N0ZXBWYWx1ZX1cbiAqL1xuY29uc3QgSFNWQV9NQVggPSB7IGg6IDM2MCwgczogMSwgdjogMSwgYTogMSB9O1xuXG4vKipcbiAqIExpbmVhcmx5IGNvbXB1dGUgdGhlIHN0ZXAgc2l6ZSBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQgKG5vdCBub3JtYWxpemVkKVxuICogQHBhcmFtIHtTdGVwVmFsdWV9IHN0YXJ0XG4gKiBAcGFyYW0ge1N0ZXBWYWx1ZX0gZW5kXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcHMgLSBudW1iZXIgb2YgZGVzaXJlZCBzdGVwc1xuICogQHJldHVybiB7U3RlcFZhbHVlfVxuICovXG5mdW5jdGlvbiBzdGVwaXplKHN0YXJ0LCBlbmQsIHN0ZXBzKSB7XG4gICAgbGV0IHN0ZXAgPSB7fTtcblxuICAgIGZvciAobGV0IGsgaW4gc3RhcnQpIHtcbiAgICAgICAgaWYgKHN0YXJ0Lmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBzdGVwW2tdID0gc3RlcHMgPT09IDAgPyAwIDogKGVuZFtrXSAtIHN0YXJ0W2tdKSAvIHN0ZXBzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ZXA7XG59XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgZmluYWwgc3RlcCBjb2xvclxuICogQHBhcmFtIHtTdGVwVmFsdWV9IHN0ZXAgLSBmcm9tIGBzdGVwaXplYFxuICogQHBhcmFtIHtTdGVwVmFsdWV9IHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gaSAtIGNvbG9yIGluZGV4XG4gKiBAcGFyYW0ge1N0ZXBWYWx1ZX0gbWF4IC0gcmdiYSBvciBoc3ZhIG9mIG1heGltdW0gdmFsdWVzIGZvciBlYWNoIGNoYW5uZWxcbiAqIEByZXR1cm4ge1N0ZXBWYWx1ZX1cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RlcCwgc3RhcnQsIGksIG1heCkge1xuICAgIGxldCBjb2xvciA9IHt9O1xuXG4gICAgZm9yIChsZXQgayBpbiBzdGFydCkge1xuICAgICAgICBpZiAoc3RhcnQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgIGNvbG9yW2tdID0gc3RlcFtrXSAqIGkgKyBzdGFydFtrXTtcbiAgICAgICAgICAgIGNvbG9yW2tdID0gY29sb3Jba10gPCAwID8gY29sb3Jba10gKyBtYXhba10gOiAobWF4W2tdICE9PSAxID8gY29sb3Jba10gJSBtYXhba10gOiBjb2xvcltrXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgZ3JhZGllbnQgd2l0aCBSR0JhIGludGVycG9sYXRpb25cbiAqIEBwYXJhbSB7U3RvcElucHV0fSBzdG9wMVxuICogQHBhcmFtIHtTdG9wSW5wdXR9IHN0b3AyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcHNcbiAqIEByZXR1cm4ge3Rpbnljb2xvcltdfSBjb2xvcjEgaW5jbHVkZWQsIGNvbG9yMiBleGNsdWRlZFxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVJnYihzdG9wMSwgc3RvcDIsIHN0ZXBzKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBzdG9wMS5jb2xvci50b1JnYigpO1xuICAgIGNvbnN0IGVuZCA9IHN0b3AyLmNvbG9yLnRvUmdiKCk7XG4gICAgY29uc3Qgc3RlcCA9IHN0ZXBpemUoc3RhcnQsIGVuZCwgc3RlcHMpO1xuICAgIGxldCBncmFkaWVudCA9IFtzdG9wMS5jb2xvcl07XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHN0ZXBzOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29sb3IgPSBpbnRlcnBvbGF0ZShzdGVwLCBzdGFydCwgaSwgUkdCQV9NQVgpO1xuICAgICAgICBncmFkaWVudC5wdXNoKHRpbnljb2xvcihjb2xvcikpO1xuICAgIH1cblxuICAgIHJldHVybiBncmFkaWVudDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBncmFkaWVudCB3aXRoIEhTVmEgaW50ZXJwb2xhdGlvblxuICogQHBhcmFtIHtTdG9wSW5wdXR9IHN0b3AxXG4gKiBAcGFyYW0ge1N0b3BJbnB1dH0gc3RvcDJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwc1xuICogQHBhcmFtIHtib29sZWFufCdsb25nJ3wnc2hvcnQnfSBtb2RlXG4gKiBAcmV0dXJuIHt0aW55Y29sb3JbXX0gY29sb3IxIGluY2x1ZGVkLCBjb2xvcjIgZXhjbHVkZWRcbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGVIc3Yoc3RvcDEsIHN0b3AyLCBzdGVwcywgbW9kZSkge1xuICAgIGNvbnN0IHN0YXJ0ID0gc3RvcDEuY29sb3IudG9Ic3YoKTtcbiAgICBjb25zdCBlbmQgPSBzdG9wMi5jb2xvci50b0hzdigpO1xuXG4gICAgLy8gcmdiIGludGVycG9sYXRpb24gaWYgb25lIG9mIHRoZSBzdGVwcyBpbiBncmF5c2NhbGVcbiAgICBpZiAoc3RhcnQucyA9PT0gMCB8fCBlbmQucyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGVSZ2Ioc3RvcDEsIHN0b3AyLCBzdGVwcyk7XG4gICAgfVxuXG4gICAgbGV0IHRyaWdvbm9tZXRyaWM7XG4gICAgaWYgKHR5cGVvZiBtb2RlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdHJpZ29ub21ldHJpYyA9IG1vZGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0cmlnU2hvcnRlc3QgPSAoc3RhcnQuaCA8IGVuZC5oICYmIGVuZC5oIC0gc3RhcnQuaCA8IDE4MCkgfHwgKHN0YXJ0LmggPiBlbmQuaCAmJiBzdGFydC5oIC0gZW5kLmggPiAxODApO1xuICAgICAgICB0cmlnb25vbWV0cmljID0gKG1vZGUgPT09ICdsb25nJyAmJiB0cmlnU2hvcnRlc3QpIHx8IChtb2RlID09PSAnc2hvcnQnICYmICF0cmlnU2hvcnRlc3QpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0ZXAgPSBzdGVwaXplKHN0YXJ0LCBlbmQsIHN0ZXBzKTtcbiAgICBsZXQgZ3JhZGllbnQgPSBbc3RvcDEuY29sb3JdO1xuXG4gICAgLy8gcmVjb21wdXRlIGh1ZVxuICAgIGxldCBkaWZmO1xuICAgIGlmICgoc3RhcnQuaCA8PSBlbmQuaCAmJiAhdHJpZ29ub21ldHJpYykgfHwgKHN0YXJ0LmggPj0gZW5kLmggJiYgdHJpZ29ub21ldHJpYykpIHtcbiAgICAgICAgZGlmZiA9IGVuZC5oIC0gc3RhcnQuaDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHJpZ29ub21ldHJpYykge1xuICAgICAgICBkaWZmID0gMzYwIC0gZW5kLmggKyBzdGFydC5oO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGlmZiA9IDM2MCAtIHN0YXJ0LmggKyBlbmQuaDtcbiAgICB9XG4gICAgc3RlcC5oID0gTWF0aC5wb3coLTEsIHRyaWdvbm9tZXRyaWMgPyAxIDogMCkgKiBNYXRoLmFicyhkaWZmKSAvIHN0ZXBzO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdGVwczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gaW50ZXJwb2xhdGUoc3RlcCwgc3RhcnQsIGksIEhTVkFfTUFYKTtcbiAgICAgICAgZ3JhZGllbnQucHVzaCh0aW55Y29sb3IoY29sb3IpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JhZGllbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZSBzdWJzdGVwcyBiZXR3ZWVuIGVhY2ggc3RvcHNcbiAqIEBwYXJhbSB7U3RvcElucHV0W119IHN0b3BzXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcHNcbiAqIEByZXR1cm4ge251bWJlcltdfVxuICovXG5mdW5jdGlvbiBjb21wdXRlU3Vic3RlcHMoc3RvcHMsIHN0ZXBzKSB7XG4gICAgY29uc3QgbCA9IHN0b3BzLmxlbmd0aDtcblxuICAgIC8vIHZhbGlkYXRpb25cbiAgICBzdGVwcyA9IHBhcnNlSW50KHN0ZXBzLCAxMCk7XG5cbiAgICBpZiAoaXNOYU4oc3RlcHMpIHx8IHN0ZXBzIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbnVtYmVyIG9mIHN0ZXBzICg8IDIpJyk7XG4gICAgfVxuICAgIGlmIChzdGVwcyA8IGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgb2Ygc3RlcHMgY2Fubm90IGJlIGluZmVyaW9yIHRvIG51bWJlciBvZiBzdG9wcycpO1xuICAgIH1cblxuICAgIC8vIGNvbXB1dGUgc3Vic3RlcHMgZnJvbSBzdG9wIHBvc2l0aW9uc1xuICAgIGxldCBzdWJzdGVwcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IChzdGVwcyAtIDEpICogKHN0b3BzW2ldLnBvcyAtIHN0b3BzW2kgLSAxXS5wb3MpO1xuICAgICAgICBzdWJzdGVwcy5wdXNoKE1hdGgubWF4KDEsIE1hdGgucm91bmQoc3RlcCkpKTtcbiAgICB9XG5cbiAgICAvLyBhZGp1c3QgbnVtYmVyIG9mIHN0ZXBzXG4gICAgbGV0IHRvdGFsU3Vic3RlcHMgPSAxO1xuICAgIGZvciAobGV0IG4gPSBsIC0gMTsgbi0tOykgdG90YWxTdWJzdGVwcyArPSBzdWJzdGVwc1tuXTtcblxuICAgIHdoaWxlICh0b3RhbFN1YnN0ZXBzICE9PSBzdGVwcykge1xuICAgICAgICBpZiAodG90YWxTdWJzdGVwcyA8IHN0ZXBzKSB7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbi5hcHBseShudWxsLCBzdWJzdGVwcyk7XG4gICAgICAgICAgICBzdWJzdGVwc1tzdWJzdGVwcy5pbmRleE9mKG1pbildKys7XG4gICAgICAgICAgICB0b3RhbFN1YnN0ZXBzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBzdWJzdGVwcyk7XG4gICAgICAgICAgICBzdWJzdGVwc1tzdWJzdGVwcy5pbmRleE9mKG1heCldLS07XG4gICAgICAgICAgICB0b3RhbFN1YnN0ZXBzLS07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RlcHM7XG59XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgY29sb3IgYXQgYSBzcGVjaWZpYyBwb3NpdGlvblxuICogQHBhcmFtIHtTdG9wSW5wdXRbXX0gc3RvcHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7U3RlcFZhbHVlfSBtYXhcbiAqIEByZXR1cm5zIHt0aW55Y29sb3J9XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdChzdG9wcywgcG9zLCBtZXRob2QsIG1heCkge1xuICAgIGlmIChwb3MgPCAwIHx8IHBvcyA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3NpdGlvbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMScpO1xuICAgIH1cblxuICAgIGxldCBzdGFydCwgZW5kO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gc3RvcHMubGVuZ3RoOyBpIDwgbCAtIDE7IGkrKykge1xuICAgICAgICBpZiAocG9zID49IHN0b3BzW2ldLnBvcyAmJiBwb3MgPCBzdG9wc1tpICsgMV0ucG9zKSB7XG4gICAgICAgICAgICBzdGFydCA9IHN0b3BzW2ldO1xuICAgICAgICAgICAgZW5kID0gc3RvcHNbaSArIDFdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXN0YXJ0KSB7XG4gICAgICAgIHN0YXJ0ID0gZW5kID0gc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV07XG4gICAgfVxuXG4gICAgY29uc3Qgc3RlcCA9IHN0ZXBpemUoc3RhcnQuY29sb3JbbWV0aG9kXSgpLCBlbmQuY29sb3JbbWV0aG9kXSgpLCAoZW5kLnBvcyAtIHN0YXJ0LnBvcykgKiAxMDApO1xuICAgIGNvbnN0IGNvbG9yID0gaW50ZXJwb2xhdGUoc3RlcCwgc3RhcnQuY29sb3JbbWV0aG9kXSgpLCBNYXRoLnJvdW5kKChwb3MgLSBzdGFydC5wb3MpICogMTAwKSwgbWF4KTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGNvbG9yKTtcbn1cblxuY2xhc3MgVGlueUdyYWRpZW50IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0b3BJbnB1dFtdfENvbG9ySW5wdXRbXX0gc3RvcHNcbiAgICAgKiBAcmV0dXJucyB7VGlueUdyYWRpZW50fVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0b3BzKSB7XG4gICAgICAgIC8vIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKHN0b3BzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBudW1iZXIgb2Ygc3RvcHMgKDwgMiknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhdmluZ1Bvc2l0aW9ucyA9IHN0b3BzWzBdLnBvcyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgbCA9IHN0b3BzLmxlbmd0aDtcbiAgICAgICAgbGV0IHAgPSAtMTtcbiAgICAgICAgbGV0IGxhc3RDb2xvckxlc3MgPSBmYWxzZTtcbiAgICAgICAgLy8gY3JlYXRlIHRpbnljb2xvciBvYmplY3RzIGFuZCBjbGVhbiBwb3NpdGlvbnNcbiAgICAgICAgdGhpcy5zdG9wcyA9IHN0b3BzLm1hcCgoc3RvcCwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFzUG9zaXRpb24gPSBzdG9wLnBvcyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGhhdmluZ1Bvc2l0aW9ucyBeIGhhc1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbWl4IHBvc2l0aW9ubmVkIGFuZCBub3QgcG9zaW9ubmVkIGNvbG9yIHN0b3BzJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0NvbG9yID0gc3RvcC5jb2xvciAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmICghaGFzQ29sb3IgJiYgKGxhc3RDb2xvckxlc3MgfHwgaSA9PT0gMCB8fCBpID09PSBsIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVmaW5lIHR3byBjb25zZWN1dGl2ZSBwb3NpdGlvbi1vbmx5IHN0b3BzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RDb2xvckxlc3MgPSAhaGFzQ29sb3I7XG5cbiAgICAgICAgICAgICAgICBzdG9wID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvciAgICA6IGhhc0NvbG9yID8gdGlueWNvbG9yKHN0b3AuY29sb3IpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3JMZXNzOiAhaGFzQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHBvcyAgICAgIDogc3RvcC5wb3NcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0b3AucG9zIDwgMCB8fCBzdG9wLnBvcyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvciBzdG9wcyBwb3NpdGlvbnMgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RvcC5wb3MgPD0gcCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yIHN0b3BzIHBvc2l0aW9ucyBhcmUgbm90IG9yZGVyZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcCA9IHN0b3AucG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RvcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRpbnljb2xvcihzdG9wLmNvbG9yICE9PSB1bmRlZmluZWQgPyBzdG9wLmNvbG9yIDogc3RvcCksXG4gICAgICAgICAgICAgICAgICAgIHBvcyAgOiBpIC8gKGwgLSAxKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdG9wO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5zdG9wc1swXS5wb3MgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcHMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuc3RvcHNbMF0uY29sb3IsXG4gICAgICAgICAgICAgICAgcG9zICA6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0b3BzW2wgLSAxXS5wb3MgIT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuc3RvcHNbbCAtIDFdLmNvbG9yLFxuICAgICAgICAgICAgICAgIHBvcyAgOiAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBuZXcgaW5zdGFuY2Ugd2l0aCByZXZlcnNlZCBzdG9wc1xuICAgICAqIEByZXR1cm4ge1RpbnlHcmFkaWVudH1cbiAgICAgKi9cbiAgICByZXZlcnNlKCkge1xuICAgICAgICBsZXQgc3RvcHMgPSBbXTtcblxuICAgICAgICB0aGlzLnN0b3BzLmZvckVhY2goZnVuY3Rpb24gKHN0b3ApIHtcbiAgICAgICAgICAgIHN0b3BzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzdG9wLmNvbG9yLFxuICAgICAgICAgICAgICAgIHBvcyAgOiAxIC0gc3RvcC5wb3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFRpbnlHcmFkaWVudChzdG9wcy5yZXZlcnNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBuZXcgaW5zdGFuY2Ugd2l0aCBsb29wZWQgc3RvcHNcbiAgICAgKiBAcmV0dXJuIHtUaW55R3JhZGllbnR9XG4gICAgICovXG4gICAgbG9vcCgpIHtcbiAgICAgICAgbGV0IHN0b3BzMSA9IFtdO1xuICAgICAgICBsZXQgc3RvcHMyID0gW107XG5cbiAgICAgICAgdGhpcy5zdG9wcy5mb3JFYWNoKChzdG9wKSA9PiB7XG4gICAgICAgICAgICBzdG9wczEucHVzaCh7XG4gICAgICAgICAgICAgICAgY29sb3I6IHN0b3AuY29sb3IsXG4gICAgICAgICAgICAgICAgcG9zICA6IHN0b3AucG9zIC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc3RvcHMuc2xpY2UoMCwgLTEpLmZvckVhY2goKHN0b3ApID0+IHtcbiAgICAgICAgICAgIHN0b3BzMi5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogc3RvcC5jb2xvcixcbiAgICAgICAgICAgICAgICBwb3MgIDogMSAtIHN0b3AucG9zIC8gMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgVGlueUdyYWRpZW50KHN0b3BzMS5jb25jYXQoc3RvcHMyLnJldmVyc2UoKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGdyYWRpZW50IHdpdGggUkdCYSBpbnRlcnBvbGF0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBzXG4gICAgICogQHJldHVybiB7dGlueWNvbG9yW119XG4gICAgICovXG4gICAgcmdiKHN0ZXBzKSB7XG4gICAgICAgIGNvbnN0IHN1YnN0ZXBzID0gY29tcHV0ZVN1YnN0ZXBzKHRoaXMuc3RvcHMsIHN0ZXBzKTtcbiAgICAgICAgbGV0IGdyYWRpZW50ID0gW107XG5cbiAgICAgICAgdGhpcy5zdG9wcy5mb3JFYWNoKChzdG9wLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RvcC5jb2xvckxlc3MpIHtcbiAgICAgICAgICAgICAgICBzdG9wLmNvbG9yID0gaW50ZXJwb2xhdGVSZ2IodGhpcy5zdG9wc1tpIC0gMV0sIHRoaXMuc3RvcHNbaSArIDFdLCAyKVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLnN0b3BzLmxlbmd0aDsgaSA8IGwgLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJnYiA9IGludGVycG9sYXRlUmdiKHRoaXMuc3RvcHNbaV0sIHRoaXMuc3RvcHNbaSArIDFdLCBzdWJzdGVwc1tpXSk7XG4gICAgICAgICAgICBncmFkaWVudC5zcGxpY2UoZ3JhZGllbnQubGVuZ3RoLCAwLCAuLi5yZ2IpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JhZGllbnQucHVzaCh0aGlzLnN0b3BzW3RoaXMuc3RvcHMubGVuZ3RoIC0gMV0uY29sb3IpO1xuXG4gICAgICAgIHJldHVybiBncmFkaWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBncmFkaWVudCB3aXRoIEhTVmEgaW50ZXJwb2xhdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnwnbG9uZyd8J3Nob3J0J30gW21vZGU9ZmFsc2VdXG4gICAgICogICAgLSBmYWxzZSB0byBzdGVwIGluIGNsb2Nrd2lzZVxuICAgICAqICAgIC0gdHJ1ZSB0byBzdGVwIGluIHRyaWdvbm9tZXRyaWMgb3JkZXJcbiAgICAgKiAgICAtICdzaG9ydCcgdG8gdXNlIHRoZSBzaG9ydGVzdCB3YXlcbiAgICAgKiAgICAtICdsb25nJyB0byB1c2UgdGhlIGxvbmdlc3Qgd2F5XG4gICAgICogQHJldHVybiB7dGlueWNvbG9yW119XG4gICAgICovXG4gICAgaHN2KHN0ZXBzLCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHN1YnN0ZXBzID0gY29tcHV0ZVN1YnN0ZXBzKHRoaXMuc3RvcHMsIHN0ZXBzKTtcbiAgICAgICAgbGV0IGdyYWRpZW50ID0gW107XG5cbiAgICAgICAgdGhpcy5zdG9wcy5mb3JFYWNoKChzdG9wLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RvcC5jb2xvckxlc3MpIHtcbiAgICAgICAgICAgICAgICBzdG9wLmNvbG9yID0gaW50ZXJwb2xhdGVIc3YodGhpcy5zdG9wc1tpIC0gMV0sIHRoaXMuc3RvcHNbaSArIDFdLCAyLCBtb2RlKVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLnN0b3BzLmxlbmd0aDsgaSA8IGwgLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGhzdiA9IGludGVycG9sYXRlSHN2KHRoaXMuc3RvcHNbaV0sIHRoaXMuc3RvcHNbaSArIDFdLCBzdWJzdGVwc1tpXSwgbW9kZSk7XG4gICAgICAgICAgICBncmFkaWVudC5zcGxpY2UoZ3JhZGllbnQubGVuZ3RoLCAwLCAuLi5oc3YpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JhZGllbnQucHVzaCh0aGlzLnN0b3BzW3RoaXMuc3RvcHMubGVuZ3RoIC0gMV0uY29sb3IpO1xuXG4gICAgICAgIHJldHVybiBncmFkaWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBDU1MzIGNvbW1hbmQgKG5vIHByZWZpeCkgZm9yIHRoaXMgZ3JhZGllbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW21vZGU9bGluZWFyXSAtICdsaW5lYXInIG9yICdyYWRpYWwnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtkaXJlY3Rpb25dIC0gZGVmYXVsdCBpcyAndG8gcmlnaHQnIG9yICdlbGxpcHNlIGF0IGNlbnRlcidcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgY3NzKG1vZGUsIGRpcmVjdGlvbikge1xuICAgICAgICBtb2RlID0gbW9kZSB8fCAnbGluZWFyJztcbiAgICAgICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IChtb2RlID09PSAnbGluZWFyJyA/ICd0byByaWdodCcgOiAnZWxsaXBzZSBhdCBjZW50ZXInKTtcblxuICAgICAgICBsZXQgY3NzID0gbW9kZSArICctZ3JhZGllbnQoJyArIGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5zdG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9wKSB7XG4gICAgICAgICAgICBjc3MgKz0gJywgJyArIChzdG9wLmNvbG9yTGVzcyA/ICcnIDogc3RvcC5jb2xvci50b1JnYlN0cmluZygpICsgJyAnKSArIChzdG9wLnBvcyAqIDEwMCkgKyAnJSc7XG4gICAgICAgIH0pO1xuICAgICAgICBjc3MgKz0gJyknO1xuICAgICAgICByZXR1cm4gY3NzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbG9yIGF0IHNwZWNpZmljIHBvc2l0aW9uIHdpdGggUkdCYSBpbnRlcnBvbGF0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvcywgYmV0d2VlbiAwIGFuZCAxXG4gICAgICogQHJldHVybiB7dGlueWNvbG9yfVxuICAgICAqL1xuICAgIHJnYkF0KHBvcykge1xuICAgICAgICByZXR1cm4gY29tcHV0ZUF0KHRoaXMuc3RvcHMsIHBvcywgJ3RvUmdiJywgUkdCQV9NQVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbG9yIGF0IHNwZWNpZmljIHBvc2l0aW9uIHdpdGggSFNWYSBpbnRlcnBvbGF0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvcywgYmV0d2VlbiAwIGFuZCAxXG4gICAgICogQHJldHVybiB7dGlueWNvbG9yfVxuICAgICAqL1xuICAgIGhzdkF0KHBvcykge1xuICAgICAgICByZXR1cm4gY29tcHV0ZUF0KHRoaXMuc3RvcHMsIHBvcywgJ3RvSHN2JywgSFNWQV9NQVgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N0b3BJbnB1dFtdfENvbG9ySW5wdXRbXXxTdG9wSW5wdXQuLi58Q29sb3JJbnB1dC4uLn0gc3RvcHNcbiAqIEByZXR1cm5zIHtUaW55R3JhZGllbnR9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0b3BzKSB7XG4gICAgLy8gdmFyYXJnc1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmICghKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInN0b3BzXCIgaXMgbm90IGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RvcHMgPSBhcmd1bWVudHNbMF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdG9wcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUaW55R3JhZGllbnQoc3RvcHMpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/tinygradient/browser.js\n");

/***/ })

}]);