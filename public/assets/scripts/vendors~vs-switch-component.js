(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~vs-switch-component"],{

/***/ "./node_modules/vuesax/dist/vsSwitch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/vuesax/dist/vsSwitch/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n  * Vuesax v4.0.1-alpha.21 ðŸ–– (https://lusaxweb.github.io/vuesax/)\n  * Forged by Luis Daniel Rovira\n  * Released under the MIT License.\n  * Donate: https://www.patreon.com/bePatron?c=1567892\n  * Â© 2019, Lusaxweb. (https://lusaxweb.net)\n  */\n!function (e, t) {\n   true ? module.exports = t(__webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\")) : undefined;\n}(\"undefined\" != typeof self ? self : this, function (n) {\n  return (i = {}, o.m = r = {\n    0: function (e, t, n) {\n      \"use strict\";\n\n      var r = n(4),\n          c = n.n(r),\n          l = \"undefined\" != typeof Reflect && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;\n\n      function s(n, r, o) {\n        (o ? Reflect.getOwnMetadataKeys(r, o) : Reflect.getOwnMetadataKeys(r)).forEach(function (e) {\n          var t = o ? Reflect.getOwnMetadata(e, r, o) : Reflect.getOwnMetadata(e, r);\n          o ? Reflect.defineMetadata(e, t, n, o) : Reflect.defineMetadata(e, t, n);\n        });\n      }\n\n      var u = {\n        __proto__: []\n      } instanceof Array;\n\n      function a(o) {\n        return function (e, t, n) {\n          var r = \"function\" == typeof e ? e : e.constructor;\n          r.__decorators__ || (r.__decorators__ = []), \"number\" != typeof n && (n = void 0), r.__decorators__.push(function (e) {\n            return o(e, t, n);\n          });\n        };\n      }\n\n      var p = [\"data\", \"beforeCreate\", \"created\", \"beforeMount\", \"mounted\", \"beforeDestroy\", \"destroyed\", \"beforeUpdate\", \"updated\", \"activated\", \"deactivated\", \"render\", \"errorCaptured\", \"serverPrefetch\"];\n\n      function o(e, r) {\n        void 0 === r && (r = {}), r.name = r.name || e._componentTag || e.name;\n        var o = e.prototype;\n        Object.getOwnPropertyNames(o).forEach(function (t) {\n          if (\"constructor\" !== t) if (-1 < p.indexOf(t)) r[t] = o[t];else {\n            var n = Object.getOwnPropertyDescriptor(o, t);\n            void 0 !== n.value ? \"function\" == typeof n.value ? (r.methods || (r.methods = {}))[t] = n.value : (r.mixins || (r.mixins = [])).push({\n              data: function () {\n                var e;\n                return (e = {})[t] = n.value, e;\n              }\n            }) : (n.get || n.set) && ((r.computed || (r.computed = {}))[t] = {\n              get: n.get,\n              set: n.set\n            });\n          }\n        }), (r.mixins || (r.mixins = [])).push({\n          data: function () {\n            return function (r, e) {\n              var t = e.prototype._init;\n\n              e.prototype._init = function () {\n                var e = this,\n                    t = Object.getOwnPropertyNames(r);\n                if (r.$options.props) for (var n in r.$options.props) r.hasOwnProperty(n) || t.push(n);\n                t.forEach(function (t) {\n                  \"_\" !== t.charAt(0) && Object.defineProperty(e, t, {\n                    get: function () {\n                      return r[t];\n                    },\n                    set: function (e) {\n                      r[t] = e;\n                    },\n                    configurable: !0\n                  });\n                });\n              };\n\n              var n = new e();\n              e.prototype._init = t;\n              var o = {};\n              return Object.keys(n).forEach(function (e) {\n                void 0 !== n[e] && (o[e] = n[e]);\n              }), o;\n            }(this, e);\n          }\n        });\n        var t = e.__decorators__;\n        t && (t.forEach(function (e) {\n          return e(r);\n        }), delete e.__decorators__);\n        var n = Object.getPrototypeOf(e.prototype),\n            i = n instanceof c.a ? n.constructor : c.a,\n            a = i.extend(r);\n        return function (o, i, a) {\n          Object.getOwnPropertyNames(i).forEach(function (e) {\n            if (!f[e]) {\n              var t = Object.getOwnPropertyDescriptor(o, e);\n\n              if (!t || t.configurable) {\n                var n = Object.getOwnPropertyDescriptor(i, e);\n\n                if (!u) {\n                  if (\"cid\" === e) return;\n                  var r = Object.getOwnPropertyDescriptor(a, e);\n                  if (!function (e) {\n                    var t = typeof e;\n                    return null == e || \"object\" != t && \"function\" != t;\n                  }(n.value) && r && r.value === n.value) return;\n                }\n\n                0, Object.defineProperty(o, e, n);\n              }\n            }\n          });\n        }(a, e, i), l && function (t, n) {\n          s(t, n), Object.getOwnPropertyNames(n.prototype).forEach(function (e) {\n            s(t.prototype, n.prototype, e);\n          }), Object.getOwnPropertyNames(n).forEach(function (e) {\n            s(t, n, e);\n          });\n        }(a, e), a;\n      }\n\n      var f = {\n        prototype: !0,\n        arguments: !0,\n        callee: !0,\n        caller: !0\n      };\n\n      function i(t) {\n        return \"function\" == typeof t ? o(t) : function (e) {\n          return o(e, t);\n        };\n      }\n\n      i.registerHooks = function (e) {\n        p.push.apply(p, e);\n      };\n\n      var d = i;\n      n.d(t, \"b\", function () {\n        return y;\n      }), n.d(t, \"c\", function () {\n        return g;\n      }), n.d(t, \"a\", function () {\n        return d;\n      });\n      var h = \"undefined\" != typeof Reflect && void 0 !== Reflect.getMetadata;\n\n      function b(e, t, n) {\n        h && (Array.isArray(e) || \"function\" == typeof e || void 0 !== e.type || (e.type = Reflect.getMetadata(\"design:type\", t, n)));\n      }\n\n      function y(n) {\n        return void 0 === n && (n = {}), function (e, t) {\n          b(n, e, t), a(function (e, t) {\n            (e.props || (e.props = {}))[t] = n;\n          })(e, t);\n        };\n      }\n\n      function g(r, e) {\n        void 0 === e && (e = {});\n        var t = e.deep,\n            o = void 0 !== t && t,\n            n = e.immediate,\n            i = void 0 !== n && n;\n        return a(function (e, t) {\n          \"object\" != typeof e.watch && (e.watch = Object.create(null));\n          var n = e.watch;\n          \"object\" != typeof n[r] || Array.isArray(n[r]) ? void 0 === n[r] && (n[r] = []) : n[r] = [n[r]], n[r].push({\n            handler: t,\n            deep: o,\n            immediate: i\n          });\n        });\n      }\n    },\n    1: function (e, t) {\n      e.exports = function (n, r, e, t, o) {\n        var i = {};\n        return Object.keys(t).forEach(function (e) {\n          i[e] = t[e];\n        }), i.enumerable = !!i.enumerable, i.configurable = !!i.configurable, (\"value\" in i || i.initializer) && (i.writable = !0), i = e.slice().reverse().reduce(function (e, t) {\n          return t(n, r, e) || e;\n        }, i), o && void 0 !== i.initializer && (i.value = i.initializer ? i.initializer.call(o) : void 0, i.initializer = void 0), void 0 === i.initializer && (Object.defineProperty(n, r, i), i = null), i;\n      };\n    },\n    10: function (e, t) {\n      e.exports = function (e, t, n) {\n        return t in e ? Object.defineProperty(e, t, {\n          value: n,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[t] = n, e;\n      };\n    },\n    2: function (e, t) {\n      e.exports = function (e, t, n, r) {\n        n && Object.defineProperty(e, t, {\n          enumerable: n.enumerable,\n          configurable: n.configurable,\n          writable: n.writable,\n          value: n.initializer ? n.initializer.call(r) : void 0\n        });\n      };\n    },\n    21: function (e, t, n) {},\n    3: function (e, t) {\n      e.exports = function (e) {\n        if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return e;\n      };\n    },\n    4: function (e, t) {\n      e.exports = n;\n    },\n    46: function (e, t, n) {\n      \"use strict\";\n\n      n.r(t);\n      n(21);\n\n      var r,\n          o,\n          i,\n          a,\n          c,\n          l,\n          s,\n          u,\n          p,\n          f,\n          d,\n          h,\n          b,\n          y,\n          g,\n          v,\n          m = n(10),\n          w = n.n(m),\n          O = n(2),\n          j = n.n(O),\n          x = n(7),\n          _ = n.n(x),\n          P = n(3),\n          C = n.n(P),\n          k = n(5),\n          $ = n.n(k),\n          R = n(1),\n          W = n.n(R),\n          z = (n(8), n(0)),\n          D = n(9);\n\n      function B(t, e) {\n        var n = Object.keys(t);\n\n        if (Object.getOwnPropertySymbols) {\n          var r = Object.getOwnPropertySymbols(t);\n          e && (r = r.filter(function (e) {\n            return Object.getOwnPropertyDescriptor(t, e).enumerable;\n          })), n.push.apply(n, r);\n        }\n\n        return n;\n      }\n\n      function S(t) {\n        for (var e = 1; e < arguments.length; e++) {\n          var n = null != arguments[e] ? arguments[e] : {};\n          e % 2 ? B(n, !0).forEach(function (e) {\n            w()(t, e, n[e]);\n          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : B(n).forEach(function (e) {\n            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));\n          });\n        }\n\n        return t;\n      }\n\n      var L = (r = Object(z.b)({\n        default: \"\"\n      }), o = Object(z.b)({\n        default: \"\"\n      }), i = Object(z.b)({\n        default: \"\"\n      }), a = Object(z.b)({\n        type: Boolean,\n        default: !1\n      }), c = Object(z.b)({\n        type: Boolean,\n        default: !1\n      }), l = Object(z.b)({\n        type: Boolean,\n        default: !1\n      }), s = Object(z.b)({\n        type: Boolean,\n        default: !1\n      }), Object(z.a)((p = function (o) {\n        function e() {\n          for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++) n[r] = arguments[r];\n\n          return e = o.call.apply(o, [this].concat(n)) || this, j()(e, \"value\", f, C()(e)), j()(e, \"val\", d, C()(e)), j()(e, \"notValue\", h, C()(e)), j()(e, \"loading\", b, C()(e)), j()(e, \"square\", y, C()(e)), j()(e, \"indeterminate\", g, C()(e)), j()(e, \"icon\", v, C()(e)), e;\n        }\n\n        return $()(e, o), e.prototype.render = function (e) {\n          var o = this,\n              t = e(\"div\", {\n            class: [\"vs-switch__circle\"]\n          }, [this.$slots.circle]),\n              n = e(\"div\", {\n            ref: \"on\",\n            class: [\"vs-switch__text\", \"on\"]\n          }, [this.$slots.on || this.$slots.default]),\n              r = e(\"div\", {\n            ref: \"off\",\n            class: [\"vs-switch__text\", \"off\"]\n          }, [this.$slots.off || this.$slots.default]),\n              i = e(\"div\", {\n            class: [\"vs-switch__background\"]\n          }),\n              a = e(\"input\", {\n            attrs: S({}, this.$attrs, {\n              type: \"checkbox\"\n            }),\n            domProps: {\n              checked: this.isChecked\n            },\n            on: S({}, this.$listeners, {\n              input: function (e) {\n                if (\"boolean\" == typeof o.value) o.$emit(\"input\", !o.value);else if (\"object\" == typeof o.value && null !== o.value) {\n                  var t = o.value,\n                      n = -1 === t.indexOf(o.val) && -1 === JSON.stringify(t).indexOf(JSON.stringify(o.val)),\n                      r = 0;\n                  t.forEach(function (e, t) {\n                    JSON.stringify(e) == JSON.stringify(o.val) && (r = t);\n                  }), n ? t.push(o.val) : t.splice(r, 1), o.$emit(\"input\", t);\n                } else o.val !== o.value ? o.$emit(\"input\", o.val) : o.$emit(\"input\", o.notValue || null);\n                o.$emit(\"change\", e);\n              }\n            }),\n            class: [\"vs-switch__input\"]\n          });\n          return e(\"div\", {\n            staticClass: \"vs-switch\",\n            attrs: {\n              type: \"checkbox\"\n            },\n            class: {\n              \"vs-switch--loading\": this.loading,\n              \"vs-switch--square\": this.square,\n              \"vs-switch--indeterminate\": this.indeterminate,\n              \"vs-switch--icon\": this.icon\n            }\n          }, [a, t, n, r, i]);\n        }, _()(e, [{\n          key: \"isChecked\",\n          get: function () {\n            var n = this,\n                e = !1;\n\n            if (this.value) {\n              if (\"boolean\" == typeof this.value) e = this.value;else if (\"object\" == typeof this.value && null !== this.value) {\n                var t = this.value,\n                    r = -1 === t.indexOf(this.val) && -1 === JSON.stringify(t).indexOf(JSON.stringify(this.val));\n                return t.forEach(function (e, t) {\n                  JSON.stringify(e) == JSON.stringify(n.val) && t;\n                }), !r;\n              }\n            } else e = !1;\n\n            return e;\n          }\n        }]), e;\n      }(D.a), f = W()(p.prototype, \"value\", [r], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), d = W()(p.prototype, \"val\", [o], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), h = W()(p.prototype, \"notValue\", [i], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), b = W()(p.prototype, \"loading\", [a], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), y = W()(p.prototype, \"square\", [c], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), g = W()(p.prototype, \"indeterminate\", [l], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), v = W()(p.prototype, \"icon\", [s], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), u = p)) || u);\n      L.install = function (e) {\n        e.component(\"vs-switch\", L);\n      }, \"undefined\" != typeof window && window.Vue && L.install(window.Vue);\n      t.default = L;\n    },\n    5: function (e, t) {\n      e.exports = function (e, t) {\n        e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t;\n      };\n    },\n    6: function (e, t, n) {\n      \"use strict\";\n\n      n.d(t, \"b\", function () {\n        return r;\n      }), n.d(t, \"a\", function () {\n        return o;\n      }), n.d(t, \"c\", function () {\n        return i;\n      }), n.d(t, \"d\", function () {\n        return a;\n      });\n\n      function u(e, t, n) {\n        n ? \"#comment\" !== n.nodeName && n.style.setProperty(\"--vs-\" + e, t) : document.documentElement.style.setProperty(\"--vs-\" + e, t);\n      }\n\n      var r = function (e, t, n, r) {\n        var o,\n            i = /^(rgb|rgba)/.test(t),\n            a = /^(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d),(0|255|25[0-4]|2[0-4]\\d|1\\d\\d|0?\\d?\\d)$/.test(t),\n            c = /^(#)/.test(t);\n\n        if (\"dark\" == t && n && n.classList.add(\"vs-component-dark\"), i) {\n          var l = t.replace(/[rgba()]/g, \"\").split(\",\");\n          o = l[0] + \",\" + l[1] + \",\" + l[2], u(e, o, n), r && n.classList.add(\"vs-change-color\");\n        } else if (c) {\n          var s = function (e) {\n            e = e.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (e, t, n, r) {\n              return t + t + n + n + r + r;\n            });\n            var t = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(e);\n            return t ? {\n              r: parseInt(t[1], 16),\n              g: parseInt(t[2], 16),\n              b: parseInt(t[3], 16)\n            } : null;\n          }(t);\n\n          o = s.r + \",\" + s.g + \",\" + s.b, u(e, o, n), r && n.classList.add(\"vs-change-color\");\n        } else if (function (e) {\n          return [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"dark\", \"light\", \"warn\", \"facebook\", \"twitter\", \"youtube\", \"pinterest\", \"linkedin\", \"snapchat\", \"whatsapp\", \"tumblr\", \"reddit\", \"spotify\", \"amazon\", \"medium\", \"vimeo\", \"skype\", \"dribbble\", \"slack\", \"yahoo\", \"twitch\", \"discord\", \"telegram\", \"google-plus\", \"messenger\"].includes(e);\n        }(t)) {\n          o = getComputedStyle(document.body).getPropertyValue(\"--vs-\" + t), u(e, o, n), r && n.classList.add(\"vs-change-color\");\n        } else a && (u(e, t, n), r && n.classList.add(\"vs-change-color\"));\n      },\n          o = function (e, t) {\n        var n = t || document.body;\n        n.insertBefore(e, n.lastChild);\n      },\n          i = function (e, t) {\n        var n = t.getBoundingClientRect(),\n            r = n.x,\n            o = n.y,\n            i = n.width,\n            a = n.height,\n            c = e.style,\n            l = window.pageYOffset,\n            s = e.clientHeight + n.y + l;\n        l + window.innerHeight - s < 30 ? (c.top = o + l - e.clientHeight - 4 + \"px\", c.left = r + \"px\", c.width = i + \"px\", e.classList.add(\"top\"), t.classList.add(\"top\")) : (c.top = o + l + a - 4 + \"px\", c.left = r + \"px\", c.width = i + \"px\", e.classList.remove(\"top\"), t.classList.remove(\"top\"));\n      },\n          a = function (e, t, n) {\n        var r = t.getBoundingClientRect(),\n            o = r.x,\n            i = r.y,\n            a = r.width,\n            c = r.height,\n            l = e.style,\n            s = window.pageYOffset,\n            u = e.clientHeight + r.y + s,\n            p = s + window.innerHeight;\n\n        if (o + a + 10 + e.getBoundingClientRect().width > window.innerWidth && \"right\" == n && (n = \"left\", e.classList.remove(\"right\"), e.classList.add(\"left\")), o - 10 < e.getBoundingClientRect().width && \"left\" == n && (n = \"top\", e.classList.remove(\"left\"), e.classList.add(\"top\")), p - u < 30 || \"top\" == n) {\n          l.top = i + s - e.clientHeight - 8 + \"px\";\n          var f = o + (a - e.getBoundingClientRect().width) / 2;\n          f + e.getBoundingClientRect().width < window.innerWidth ? 0 < f ? l.left = f + \"px\" : (l.left = \"10px\", e.classList.add(\"notArrow\")) : (l.left = \"auto\", l.right = \"10px\", e.classList.add(\"notArrow\"));\n        } else if (\"bottom\" == n) {\n          l.top = i + s + c + 8 + \"px\";\n          var d = o + (a - e.getBoundingClientRect().width) / 2;\n          d + e.getBoundingClientRect().width < window.innerWidth ? 0 < d ? l.left = d + \"px\" : (l.left = \"10px\", e.classList.add(\"notArrow\")) : (l.left = \"auto\", l.right = \"10px\", e.classList.add(\"notArrow\"));\n        } else \"left\" == n ? (l.top = i + s + (c - e.getBoundingClientRect().height) / 2 + \"px\", l.left = o - e.getBoundingClientRect().width - 8 + \"px\") : \"right\" == n && (l.top = i + s + (c - e.getBoundingClientRect().height) / 2 + \"px\", l.left = o + a + 8 + \"px\");\n      };\n    },\n    7: function (e, t) {\n      function r(e, t) {\n        for (var n = 0; n < t.length; n++) {\n          var r = t[n];\n          r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n        }\n      }\n\n      e.exports = function (e, t, n) {\n        return t && r(e.prototype, t), n && r(e, n), e;\n      };\n    },\n    8: function (e, t) {\n      e.exports = function (e, t) {\n        throw new Error(\"Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.\");\n      };\n    },\n    9: function (e, t, n) {\n      \"use strict\";\n\n      n.d(t, \"a\", function () {\n        return H;\n      });\n\n      var r,\n          o,\n          i,\n          a,\n          c,\n          l,\n          s,\n          u,\n          p,\n          f,\n          d,\n          h,\n          b,\n          y,\n          g,\n          v,\n          m,\n          w,\n          O,\n          j,\n          x,\n          _,\n          P,\n          C,\n          k = n(2),\n          $ = n.n(k),\n          R = n(7),\n          W = n.n(R),\n          z = n(3),\n          D = n.n(z),\n          B = n(5),\n          S = n.n(B),\n          L = n(1),\n          E = n.n(L),\n          M = (n(8), n(4)),\n          N = n.n(M),\n          A = n(0),\n          J = n(6),\n          H = (r = Object(A.b)({\n        type: String,\n        default: null\n      }), o = Object(A.b)({\n        type: Boolean,\n        default: !1\n      }), i = Object(A.b)({\n        type: Boolean,\n        default: !1\n      }), a = Object(A.b)({\n        type: Boolean,\n        default: !1\n      }), c = Object(A.b)({\n        type: Boolean,\n        default: !1\n      }), l = Object(A.b)({\n        type: Boolean,\n        default: !1\n      }), s = Object(A.b)({\n        type: Boolean,\n        default: !1\n      }), u = Object(A.c)(\"color\"), p = Object(A.c)(\"primary\"), f = Object(A.c)(\"danger\"), d = Object(A.c)(\"success\"), h = Object(A.c)(\"warn\"), b = Object(A.c)(\"dark\"), Object(A.a)((C = P = function (o) {\n        function e() {\n          for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++) n[r] = arguments[r];\n\n          return (e = o.call.apply(o, [this].concat(n)) || this).componentColor = null, $()(e, \"color\", v, D()(e)), $()(e, \"danger\", m, D()(e)), $()(e, \"success\", w, D()(e)), $()(e, \"warn\", O, D()(e)), $()(e, \"dark\", j, D()(e)), $()(e, \"primary\", x, D()(e)), $()(e, \"active\", _, D()(e)), e;\n        }\n\n        S()(e, o);\n        var t = e.prototype;\n        return t.changeColor = function () {\n          this.$el && \"#comment\" != this.$el.nodeName && (this.componentColor = (this.danger ? \"danger\" : this.success && \"success\") || this.warn && \"warn\" || this.dark && \"dark\" || this.primary && \"primary\", (this.color || this.componentColor) && (Object(J.b)(\"color\", this.componentColor || this.color || \"primary\", this.$el, !0), this.$refs.options && Object(J.b)(\"color\", this.componentColor || this.color || \"primary\", this.$refs.options, !0), this.$refs.tooltip && Object(J.b)(\"color\", this.componentColor || this.color || \"primary\", this.$refs.tooltip, !0)), \"dark\" == this.componentColor || \"dark\" == this.color ? this.$el.classList.add(\"vs-component-dark\") : this.$el.classList.remove(\"vs-component-dark\"), \"white\" == this.componentColor ? this.$el.classList.add(\"vs-component-white\") : this.$el.classList.remove(\"vs-component-white\"));\n        }, t.handleWatchColor = function () {\n          this.changeColor();\n        }, t.handleWatchPrimary = function () {\n          this.changeColor();\n        }, t.handleWatchDanger = function () {\n          this.changeColor();\n        }, t.handleWatchSuccess = function () {\n          this.changeColor();\n        }, t.handleWatchWarn = function () {\n          this.changeColor();\n        }, t.handleWatchDark = function () {\n          this.changeColor();\n        }, t.updated = function () {\n          this.changeColor();\n        }, t.mounted = function () {\n          this.changeColor();\n        }, W()(e, [{\n          key: \"isColorDark\",\n          get: function () {\n            return \"dark\" === this.color || this.dark || \"dark\" === this.componentColor;\n          }\n        }]), e;\n      }(N.a), P.install = void 0, P.use = void 0, g = C, v = E()(g.prototype, \"color\", [r], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), m = E()(g.prototype, \"danger\", [o], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), w = E()(g.prototype, \"success\", [i], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), O = E()(g.prototype, \"warn\", [a], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), j = E()(g.prototype, \"dark\", [c], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), x = E()(g.prototype, \"primary\", [l], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), _ = E()(g.prototype, \"active\", [s], {\n        configurable: !0,\n        enumerable: !0,\n        writable: !0,\n        initializer: null\n      }), E()(g.prototype, \"handleWatchColor\", [u], Object.getOwnPropertyDescriptor(g.prototype, \"handleWatchColor\"), g.prototype), E()(g.prototype, \"handleWatchPrimary\", [p], Object.getOwnPropertyDescriptor(g.prototype, \"handleWatchPrimary\"), g.prototype), E()(g.prototype, \"handleWatchDanger\", [f], Object.getOwnPropertyDescriptor(g.prototype, \"handleWatchDanger\"), g.prototype), E()(g.prototype, \"handleWatchSuccess\", [d], Object.getOwnPropertyDescriptor(g.prototype, \"handleWatchSuccess\"), g.prototype), E()(g.prototype, \"handleWatchWarn\", [h], Object.getOwnPropertyDescriptor(g.prototype, \"handleWatchWarn\"), g.prototype), E()(g.prototype, \"handleWatchDark\", [b], Object.getOwnPropertyDescriptor(g.prototype, \"handleWatchDark\"), g.prototype), y = g)) || y);\n    }\n  }, o.c = i, o.d = function (e, t, n) {\n    o.o(e, t) || Object.defineProperty(e, t, {\n      enumerable: !0,\n      get: n\n    });\n  }, o.r = function (e) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    });\n  }, o.t = function (t, e) {\n    if (1 & e && (t = o(t)), 8 & e) return t;\n    if (4 & e && \"object\" == typeof t && t && t.__esModule) return t;\n    var n = Object.create(null);\n    if (o.r(n), Object.defineProperty(n, \"default\", {\n      enumerable: !0,\n      value: t\n    }), 2 & e && \"string\" != typeof t) for (var r in t) o.d(n, r, function (e) {\n      return t[e];\n    }.bind(null, r));\n    return n;\n  }, o.n = function (e) {\n    var t = e && e.__esModule ? function () {\n      return e.default;\n    } : function () {\n      return e;\n    };\n    return o.d(t, \"a\", t), t;\n  }, o.o = function (e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n  }, o.p = \"/dist/\", o(o.s = 46)).default;\n\n  function o(e) {\n    if (i[e]) return i[e].exports;\n    var t = i[e] = {\n      i: e,\n      l: !1,\n      exports: {}\n    };\n    return r[e].call(t.exports, t, t.exports, o), t.l = !0, t.exports;\n  }\n\n  var r, i;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vuesax/dist/vsSwitch/index.js\n");

/***/ })

}]);