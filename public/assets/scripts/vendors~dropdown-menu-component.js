(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~dropdown-menu-component"],{

/***/ "./node_modules/element-ui/lib/dropdown-menu.js":
/*!******************************************************!*\
  !*** ./node_modules/element-ui/lib/dropdown-menu.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"/dist/\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 82);\n  /******/\n}(\n/************************************************************************/\n\n/******/\n{\n  /***/\n  0:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n    /* harmony export (binding) */\n\n    __webpack_require__.d(__webpack_exports__, \"a\", function () {\n      return normalizeComponent;\n    });\n    /* globals __VUE_SSR_CONTEXT__ */\n    // IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n    // This module is a runtime utility for cleaner component module output and will\n    // be included in the final webpack user bundle.\n\n\n    function normalizeComponent(scriptExports, render, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier,\n    /* server only */\n    shadowMode\n    /* vue-cli only */\n    ) {\n      // Vue.extend constructor export interop\n      var options = typeof scriptExports === 'function' ? scriptExports.options : scriptExports; // render functions\n\n      if (render) {\n        options.render = render;\n        options.staticRenderFns = staticRenderFns;\n        options._compiled = true;\n      } // functional template\n\n\n      if (functionalTemplate) {\n        options.functional = true;\n      } // scopedId\n\n\n      if (scopeId) {\n        options._scopeId = 'data-v-' + scopeId;\n      }\n\n      var hook;\n\n      if (moduleIdentifier) {\n        // server build\n        hook = function (context) {\n          // 2.3 injection\n          context = context || // cached call\n          this.$vnode && this.$vnode.ssrContext || // stateful\n          this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n          // 2.2 with runInNewContext: true\n\n          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n            context = __VUE_SSR_CONTEXT__;\n          } // inject component styles\n\n\n          if (injectStyles) {\n            injectStyles.call(this, context);\n          } // register component module identifier for async chunk inferrence\n\n\n          if (context && context._registeredComponents) {\n            context._registeredComponents.add(moduleIdentifier);\n          }\n        }; // used by ssr in case component is cached and beforeCreate\n        // never gets called\n\n\n        options._ssrRegister = hook;\n      } else if (injectStyles) {\n        hook = shadowMode ? function () {\n          injectStyles.call(this, this.$root.$options.shadowRoot);\n        } : injectStyles;\n      }\n\n      if (hook) {\n        if (options.functional) {\n          // for template-only hot-reload because in that case the render fn doesn't\n          // go through the normalizer\n          options._injectStyles = hook; // register for functioal component in vue file\n\n          var originalRender = options.render;\n\n          options.render = function renderWithStyleInjection(h, context) {\n            hook.call(context);\n            return originalRender(h, context);\n          };\n        } else {\n          // inject component registration as beforeCreate hook\n          var existing = options.beforeCreate;\n          options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n        }\n      }\n\n      return {\n        exports: scriptExports,\n        options: options\n      };\n    }\n    /***/\n\n  },\n\n  /***/\n  5:\n  /***/\n  function (module, exports) {\n    module.exports = __webpack_require__(/*! element-ui/lib/utils/vue-popper */ \"./node_modules/element-ui/lib/utils/vue-popper.js\");\n    /***/\n  },\n\n  /***/\n  82:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown-menu.vue?vue&type=template&id=0da6b714&\n\n\n    var render = function () {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c(\"transition\", {\n        attrs: {\n          name: \"el-zoom-in-top\"\n        },\n        on: {\n          \"after-leave\": _vm.doDestroy\n        }\n      }, [_c(\"ul\", {\n        directives: [{\n          name: \"show\",\n          rawName: \"v-show\",\n          value: _vm.showPopper,\n          expression: \"showPopper\"\n        }],\n        staticClass: \"el-dropdown-menu el-popper\",\n        class: [_vm.size && \"el-dropdown-menu--\" + _vm.size]\n      }, [_vm._t(\"default\")], 2)]);\n    };\n\n    var staticRenderFns = [];\n    render._withStripped = true; // CONCATENATED MODULE: ./packages/dropdown/src/dropdown-menu.vue?vue&type=template&id=0da6b714&\n    // EXTERNAL MODULE: external \"element-ui/lib/utils/vue-popper\"\n\n    var vue_popper_ = __webpack_require__(5);\n\n    var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_); // CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dropdown/src/dropdown-menu.vue?vue&type=script&lang=js&\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\n    /* harmony default export */\n\n\n    var dropdown_menuvue_type_script_lang_js_ = {\n      name: 'ElDropdownMenu',\n      componentName: 'ElDropdownMenu',\n      mixins: [vue_popper_default.a],\n      props: {\n        visibleArrow: {\n          type: Boolean,\n          default: true\n        },\n        arrowOffset: {\n          type: Number,\n          default: 0\n        }\n      },\n      data: function data() {\n        return {\n          size: this.dropdown.dropdownSize\n        };\n      },\n      inject: ['dropdown'],\n      created: function created() {\n        var _this = this;\n\n        this.$on('updatePopper', function () {\n          if (_this.showPopper) _this.updatePopper();\n        });\n        this.$on('visible', function (val) {\n          _this.showPopper = val;\n        });\n      },\n      mounted: function mounted() {\n        this.dropdown.popperElm = this.popperElm = this.$el;\n        this.referenceElm = this.dropdown.$el; // compatible with 2.6 new v-slot syntax\n        // issue link https://github.com/ElemeFE/element/issues/14345\n\n        this.dropdown.initDomOperation();\n      },\n      watch: {\n        'dropdown.placement': {\n          immediate: true,\n          handler: function handler(val) {\n            this.currentPlacement = val;\n          }\n        }\n      }\n    }; // CONCATENATED MODULE: ./packages/dropdown/src/dropdown-menu.vue?vue&type=script&lang=js&\n\n    /* harmony default export */\n\n    var src_dropdown_menuvue_type_script_lang_js_ = dropdown_menuvue_type_script_lang_js_; // EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n\n    var componentNormalizer = __webpack_require__(0); // CONCATENATED MODULE: ./packages/dropdown/src/dropdown-menu.vue\n\n    /* normalize component */\n\n\n    var component = Object(componentNormalizer[\"a\"\n    /* default */\n    ])(src_dropdown_menuvue_type_script_lang_js_, render, staticRenderFns, false, null, null, null);\n    /* hot reload */\n\n    if (false) { var api; }\n\n    component.options.__file = \"packages/dropdown/src/dropdown-menu.vue\";\n    /* harmony default export */\n\n    var dropdown_menu = component.exports; // CONCATENATED MODULE: ./packages/dropdown-menu/index.js\n\n    /* istanbul ignore next */\n\n    dropdown_menu.install = function (Vue) {\n      Vue.component(dropdown_menu.name, dropdown_menu);\n    };\n    /* harmony default export */\n\n\n    var packages_dropdown_menu = __webpack_exports__[\"default\"] = dropdown_menu;\n    /***/\n  }\n  /******/\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/dropdown-menu.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/dom.js":
/*!**************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/dom.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.isInContainer = exports.getScrollContainer = exports.isScroll = exports.getStyle = exports.once = exports.off = exports.on = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* istanbul ignore next */\n\n\nexports.hasClass = hasClass;\nexports.addClass = addClass;\nexports.removeClass = removeClass;\nexports.setStyle = setStyle;\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isServer = _vue2.default.prototype.$isServer;\nvar SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g;\nvar MOZ_HACK_REGEXP = /^moz([A-Z])/;\nvar ieVersion = isServer ? 0 : Number(document.documentMode);\n/* istanbul ignore next */\n\nvar trim = function trim(string) {\n  return (string || '').replace(/^[\\s\\uFEFF]+|[\\s\\uFEFF]+$/g, '');\n};\n/* istanbul ignore next */\n\n\nvar camelCase = function camelCase(name) {\n  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {\n    return offset ? letter.toUpperCase() : letter;\n  }).replace(MOZ_HACK_REGEXP, 'Moz$1');\n};\n/* istanbul ignore next */\n\n\nvar on = exports.on = function () {\n  if (!isServer && document.addEventListener) {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.addEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.attachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/* istanbul ignore next */\n\n\nvar off = exports.off = function () {\n  if (!isServer && document.removeEventListener) {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.removeEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.detachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/* istanbul ignore next */\n\n\nvar once = exports.once = function once(el, event, fn) {\n  var listener = function listener() {\n    if (fn) {\n      fn.apply(this, arguments);\n    }\n\n    off(el, event, listener);\n  };\n\n  on(el, event, listener);\n};\n/* istanbul ignore next */\n\n\nfunction hasClass(el, cls) {\n  if (!el || !cls) return false;\n  if (cls.indexOf(' ') !== -1) throw new Error('className should not contain space.');\n\n  if (el.classList) {\n    return el.classList.contains(cls);\n  } else {\n    return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;\n  }\n}\n\n;\n/* istanbul ignore next */\n\nfunction addClass(el, cls) {\n  if (!el) return;\n  var curClass = el.className;\n  var classes = (cls || '').split(' ');\n\n  for (var i = 0, j = classes.length; i < j; i++) {\n    var clsName = classes[i];\n    if (!clsName) continue;\n\n    if (el.classList) {\n      el.classList.add(clsName);\n    } else if (!hasClass(el, clsName)) {\n      curClass += ' ' + clsName;\n    }\n  }\n\n  if (!el.classList) {\n    el.className = curClass;\n  }\n}\n\n;\n/* istanbul ignore next */\n\nfunction removeClass(el, cls) {\n  if (!el || !cls) return;\n  var classes = cls.split(' ');\n  var curClass = ' ' + el.className + ' ';\n\n  for (var i = 0, j = classes.length; i < j; i++) {\n    var clsName = classes[i];\n    if (!clsName) continue;\n\n    if (el.classList) {\n      el.classList.remove(clsName);\n    } else if (hasClass(el, clsName)) {\n      curClass = curClass.replace(' ' + clsName + ' ', ' ');\n    }\n  }\n\n  if (!el.classList) {\n    el.className = trim(curClass);\n  }\n}\n\n;\n/* istanbul ignore next */\n\nvar getStyle = exports.getStyle = ieVersion < 9 ? function (element, styleName) {\n  if (isServer) return;\n  if (!element || !styleName) return null;\n  styleName = camelCase(styleName);\n\n  if (styleName === 'float') {\n    styleName = 'styleFloat';\n  }\n\n  try {\n    switch (styleName) {\n      case 'opacity':\n        try {\n          return element.filters.item('alpha').opacity / 100;\n        } catch (e) {\n          return 1.0;\n        }\n\n      default:\n        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;\n    }\n  } catch (e) {\n    return element.style[styleName];\n  }\n} : function (element, styleName) {\n  if (isServer) return;\n  if (!element || !styleName) return null;\n  styleName = camelCase(styleName);\n\n  if (styleName === 'float') {\n    styleName = 'cssFloat';\n  }\n\n  try {\n    var computed = document.defaultView.getComputedStyle(element, '');\n    return element.style[styleName] || computed ? computed[styleName] : null;\n  } catch (e) {\n    return element.style[styleName];\n  }\n};\n/* istanbul ignore next */\n\nfunction setStyle(element, styleName, value) {\n  if (!element || !styleName) return;\n\n  if ((typeof styleName === 'undefined' ? 'undefined' : _typeof(styleName)) === 'object') {\n    for (var prop in styleName) {\n      if (styleName.hasOwnProperty(prop)) {\n        setStyle(element, prop, styleName[prop]);\n      }\n    }\n  } else {\n    styleName = camelCase(styleName);\n\n    if (styleName === 'opacity' && ieVersion < 9) {\n      element.style.filter = isNaN(value) ? '' : 'alpha(opacity=' + value * 100 + ')';\n    } else {\n      element.style[styleName] = value;\n    }\n  }\n}\n\n;\n\nvar isScroll = exports.isScroll = function isScroll(el, vertical) {\n  if (isServer) return;\n  var determinedDirection = vertical !== null || vertical !== undefined;\n  var overflow = determinedDirection ? vertical ? getStyle(el, 'overflow-y') : getStyle(el, 'overflow-x') : getStyle(el, 'overflow');\n  return overflow.match(/(scroll|auto)/);\n};\n\nvar getScrollContainer = exports.getScrollContainer = function getScrollContainer(el, vertical) {\n  if (isServer) return;\n  var parent = el;\n\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent)) {\n      return window;\n    }\n\n    if (isScroll(parent, vertical)) {\n      return parent;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return parent;\n};\n\nvar isInContainer = exports.isInContainer = function isInContainer(el, container) {\n  if (isServer || !el || !container) return false;\n  var elRect = el.getBoundingClientRect();\n  var containerRect = void 0;\n\n  if ([window, document, document.documentElement, null, undefined].includes(container)) {\n    containerRect = {\n      top: 0,\n      right: window.innerWidth,\n      bottom: window.innerHeight,\n      left: 0\n    };\n  } else {\n    containerRect = container.getBoundingClientRect();\n  }\n\n  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/dom.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/merge.js":
/*!****************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/merge.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nexports.default = function (target) {\n  for (var i = 1, j = arguments.length; i < j; i++) {\n    var source = arguments[i] || {};\n\n    for (var prop in source) {\n      if (source.hasOwnProperty(prop)) {\n        var value = source[prop];\n\n        if (value !== undefined) {\n          target[prop] = value;\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvbWVyZ2UuanM/N2Y0ZCJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0YXJnZXQiLCJpIiwiaiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCOztBQUVBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsVUFBVUMsTUFBVixFQUFrQjtBQUNsQyxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUE5QixFQUFzQ0gsQ0FBQyxHQUFHQyxDQUExQyxFQUE2Q0QsQ0FBQyxFQUE5QyxFQUFrRDtBQUNoRCxRQUFJSSxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0YsQ0FBRCxDQUFULElBQWdCLEVBQTdCOztBQUNBLFNBQUssSUFBSUssSUFBVCxJQUFpQkQsTUFBakIsRUFBeUI7QUFDdkIsVUFBSUEsTUFBTSxDQUFDRSxjQUFQLENBQXNCRCxJQUF0QixDQUFKLEVBQWlDO0FBQy9CLFlBQUlFLEtBQUssR0FBR0gsTUFBTSxDQUFDQyxJQUFELENBQWxCOztBQUNBLFlBQUlFLEtBQUssS0FBS0MsU0FBZCxFQUF5QjtBQUN2QlQsZ0JBQU0sQ0FBQ00sSUFBRCxDQUFOLEdBQWVFLEtBQWY7QUFDRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxTQUFPUixNQUFQO0FBQ0QsQ0FkRDs7QUFnQkEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvbWVyZ2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMSwgaiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldIHx8IHt9O1xuICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG47Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/merge.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/popper.js":
/*!*****************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/popper.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version {{version}}\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n//\n// Cross module loader\n// Supported: Node, AMD, Browser globals\n//\n\n\n;\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(undefined, function () {\n  'use strict';\n\n  var root = window; // default options\n\n  var DEFAULTS = {\n    // placement of the popper\n    placement: 'bottom',\n    gpuAcceleration: true,\n    // shift popper from its origin by the given amount of pixels (can be negative)\n    offset: 0,\n    // the element which will act as boundary of the popper\n    boundariesElement: 'viewport',\n    // amount of pixel used to define a minimum distance between the boundaries and the popper\n    boundariesPadding: 5,\n    // popper will try to prevent overflow following this order,\n    // by default, then, it could overflow on the left and on top of the boundariesElement\n    preventOverflowOrder: ['left', 'right', 'top', 'bottom'],\n    // the behavior used by flip to change the placement of the popper\n    flipBehavior: 'flip',\n    arrowElement: '[x-arrow]',\n    arrowOffset: 0,\n    // list of functions used to modify the offsets before they are applied to the popper\n    modifiers: ['shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle'],\n    modifiersIgnored: [],\n    forceAbsolute: false\n  };\n  /**\n   * Create a new Popper.js instance\n   * @constructor Popper\n   * @param {HTMLElement} reference - The reference element used to position the popper\n   * @param {HTMLElement|Object} popper\n   *      The HTML element used as popper, or a configuration used to generate the popper.\n   * @param {String} [popper.tagName='div'] The tag name of the generated popper.\n   * @param {Array} [popper.classNames=['popper']] Array of classes to apply to the generated popper.\n   * @param {Array} [popper.attributes] Array of attributes to apply, specify `attr:value` to assign a value to it.\n   * @param {HTMLElement|String} [popper.parent=window.document.body] The parent element, given as HTMLElement or as query string.\n   * @param {String} [popper.content=''] The content of the popper, it can be text, html, or node; if it is not text, set `contentType` to `html` or `node`.\n   * @param {String} [popper.contentType='text'] If `html`, the `content` will be parsed as HTML. If `node`, it will be appended as-is.\n   * @param {String} [popper.arrowTagName='div'] Same as `popper.tagName` but for the arrow element.\n   * @param {Array} [popper.arrowClassNames='popper__arrow'] Same as `popper.classNames` but for the arrow element.\n   * @param {String} [popper.arrowAttributes=['x-arrow']] Same as `popper.attributes` but for the arrow element.\n   * @param {Object} options\n   * @param {String} [options.placement=bottom]\n   *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -right),\n   *      left(-start, -end)`\n   *\n   * @param {HTMLElement|String} [options.arrowElement='[x-arrow]']\n   *      The DOM Node used as arrow for the popper, or a CSS selector used to get the DOM node. It must be child of\n   *      its parent Popper. Popper.js will apply to the given element the style required to align the arrow with its\n   *      reference element.\n   *      By default, it will look for a child node of the popper with the `x-arrow` attribute.\n   *\n   * @param {Boolean} [options.gpuAcceleration=true]\n   *      When this property is set to true, the popper position will be applied using CSS3 translate3d, allowing the\n   *      browser to use the GPU to accelerate the rendering.\n   *      If set to false, the popper will be placed using `top` and `left` properties, not using the GPU.\n   *\n   * @param {Number} [options.offset=0]\n   *      Amount of pixels the popper will be shifted (can be negative).\n   *\n   * @param {String|Element} [options.boundariesElement='viewport']\n   *      The element which will define the boundaries of the popper position, the popper will never be placed outside\n   *      of the defined boundaries (except if `keepTogether` is enabled)\n   *\n   * @param {Number} [options.boundariesPadding=5]\n   *      Additional padding for the boundaries\n   *\n   * @param {Array} [options.preventOverflowOrder=['left', 'right', 'top', 'bottom']]\n   *      Order used when Popper.js tries to avoid overflows from the boundaries, they will be checked in order,\n   *      this means that the last ones will never overflow\n   *\n   * @param {String|Array} [options.flipBehavior='flip']\n   *      The behavior used by the `flip` modifier to change the placement of the popper when the latter is trying to\n   *      overlap its reference element. Defining `flip` as value, the placement will be flipped on\n   *      its axis (`right - left`, `top - bottom`).\n   *      You can even pass an array of placements (eg: `['right', 'left', 'top']` ) to manually specify\n   *      how alter the placement when a flip is needed. (eg. in the above example, it would first flip from right to left,\n   *      then, if even in its new placement, the popper is overlapping its reference element, it will be moved to top)\n   *\n   * @param {Array} [options.modifiers=[ 'shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle']]\n   *      List of functions used to modify the data before they are applied to the popper, add your custom functions\n   *      to this array to edit the offsets and placement.\n   *      The function should reflect the @params and @returns of preventOverflow\n   *\n   * @param {Array} [options.modifiersIgnored=[]]\n   *      Put here any built-in modifier name you want to exclude from the modifiers list\n   *      The function should reflect the @params and @returns of preventOverflow\n   *\n   * @param {Boolean} [options.removeOnDestroy=false]\n   *      Set to true if you want to automatically remove the popper when you call the `destroy` method.\n   */\n\n  function Popper(reference, popper, options) {\n    this._reference = reference.jquery ? reference[0] : reference;\n    this.state = {}; // if the popper variable is a configuration object, parse it to generate an HTMLElement\n    // generate a default popper if is not defined\n\n    var isNotDefined = typeof popper === 'undefined' || popper === null;\n    var isConfig = popper && Object.prototype.toString.call(popper) === '[object Object]';\n\n    if (isNotDefined || isConfig) {\n      this._popper = this.parse(isConfig ? popper : {});\n    } // otherwise, use the given HTMLElement as popper\n    else {\n        this._popper = popper.jquery ? popper[0] : popper;\n      } // with {} we create a new object with the options inside it\n\n\n    this._options = Object.assign({}, DEFAULTS, options); // refactoring modifiers' list\n\n    this._options.modifiers = this._options.modifiers.map(function (modifier) {\n      // remove ignored modifiers\n      if (this._options.modifiersIgnored.indexOf(modifier) !== -1) return; // set the x-placement attribute before everything else because it could be used to add margins to the popper\n      // margins needs to be calculated to get the correct popper offsets\n\n      if (modifier === 'applyStyle') {\n        this._popper.setAttribute('x-placement', this._options.placement);\n      } // return predefined modifier identified by string or keep the custom one\n\n\n      return this.modifiers[modifier] || modifier;\n    }.bind(this)); // make sure to apply the popper position before any computation\n\n    this.state.position = this._getPosition(this._popper, this._reference);\n    setStyle(this._popper, {\n      position: this.state.position,\n      top: 0\n    }); // fire the first update to position the popper in the right place\n\n    this.update(); // setup event listeners, they will take care of update the position in specific situations\n\n    this._setupEventListeners();\n\n    return this;\n  } //\n  // Methods\n  //\n\n  /**\n   * Destroy the popper\n   * @method\n   * @memberof Popper\n   */\n\n\n  Popper.prototype.destroy = function () {\n    this._popper.removeAttribute('x-placement');\n\n    this._popper.style.left = '';\n    this._popper.style.position = '';\n    this._popper.style.top = '';\n    this._popper.style[getSupportedPropertyName('transform')] = '';\n\n    this._removeEventListeners(); // remove the popper if user explicity asked for the deletion on destroy\n\n\n    if (this._options.removeOnDestroy) {\n      this._popper.remove();\n    }\n\n    return this;\n  };\n  /**\n   * Updates the position of the popper, computing the new offsets and applying the new style\n   * @method\n   * @memberof Popper\n   */\n\n\n  Popper.prototype.update = function () {\n    var data = {\n      instance: this,\n      styles: {}\n    }; // store placement inside the data object, modifiers will be able to edit `placement` if needed\n    // and refer to _originalPlacement to know the original value\n\n    data.placement = this._options.placement;\n    data._originalPlacement = this._options.placement; // compute the popper and reference offsets and put them inside data.offsets\n\n    data.offsets = this._getOffsets(this._popper, this._reference, data.placement); // get boundaries\n\n    data.boundaries = this._getBoundaries(data, this._options.boundariesPadding, this._options.boundariesElement);\n    data = this.runModifiers(data, this._options.modifiers);\n\n    if (typeof this.state.updateCallback === 'function') {\n      this.state.updateCallback(data);\n    }\n  };\n  /**\n   * If a function is passed, it will be executed after the initialization of popper with as first argument the Popper instance.\n   * @method\n   * @memberof Popper\n   * @param {Function} callback\n   */\n\n\n  Popper.prototype.onCreate = function (callback) {\n    // the createCallbacks return as first argument the popper instance\n    callback(this);\n    return this;\n  };\n  /**\n   * If a function is passed, it will be executed after each update of popper with as first argument the set of coordinates and informations\n   * used to style popper and its arrow.\n   * NOTE: it doesn't get fired on the first call of the `Popper.update()` method inside the `Popper` constructor!\n   * @method\n   * @memberof Popper\n   * @param {Function} callback\n   */\n\n\n  Popper.prototype.onUpdate = function (callback) {\n    this.state.updateCallback = callback;\n    return this;\n  };\n  /**\n   * Helper used to generate poppers from a configuration file\n   * @method\n   * @memberof Popper\n   * @param config {Object} configuration\n   * @returns {HTMLElement} popper\n   */\n\n\n  Popper.prototype.parse = function (config) {\n    var defaultConfig = {\n      tagName: 'div',\n      classNames: ['popper'],\n      attributes: [],\n      parent: root.document.body,\n      content: '',\n      contentType: 'text',\n      arrowTagName: 'div',\n      arrowClassNames: ['popper__arrow'],\n      arrowAttributes: ['x-arrow']\n    };\n    config = Object.assign({}, defaultConfig, config);\n    var d = root.document;\n    var popper = d.createElement(config.tagName);\n    addClassNames(popper, config.classNames);\n    addAttributes(popper, config.attributes);\n\n    if (config.contentType === 'node') {\n      popper.appendChild(config.content.jquery ? config.content[0] : config.content);\n    } else if (config.contentType === 'html') {\n      popper.innerHTML = config.content;\n    } else {\n      popper.textContent = config.content;\n    }\n\n    if (config.arrowTagName) {\n      var arrow = d.createElement(config.arrowTagName);\n      addClassNames(arrow, config.arrowClassNames);\n      addAttributes(arrow, config.arrowAttributes);\n      popper.appendChild(arrow);\n    }\n\n    var parent = config.parent.jquery ? config.parent[0] : config.parent; // if the given parent is a string, use it to match an element\n    // if more than one element is matched, the first one will be used as parent\n    // if no elements are matched, the script will throw an error\n\n    if (typeof parent === 'string') {\n      parent = d.querySelectorAll(config.parent);\n\n      if (parent.length > 1) {\n        console.warn('WARNING: the given `parent` query(' + config.parent + ') matched more than one element, the first one will be used');\n      }\n\n      if (parent.length === 0) {\n        throw 'ERROR: the given `parent` doesn\\'t exists!';\n      }\n\n      parent = parent[0];\n    } // if the given parent is a DOM nodes list or an array of nodes with more than one element,\n    // the first one will be used as parent\n\n\n    if (parent.length > 1 && parent instanceof Element === false) {\n      console.warn('WARNING: you have passed as parent a list of elements, the first one will be used');\n      parent = parent[0];\n    } // append the generated popper to its parent\n\n\n    parent.appendChild(popper);\n    return popper;\n    /**\n     * Adds class names to the given element\n     * @function\n     * @ignore\n     * @param {HTMLElement} target\n     * @param {Array} classes\n     */\n\n    function addClassNames(element, classNames) {\n      classNames.forEach(function (className) {\n        element.classList.add(className);\n      });\n    }\n    /**\n     * Adds attributes to the given element\n     * @function\n     * @ignore\n     * @param {HTMLElement} target\n     * @param {Array} attributes\n     * @example\n     * addAttributes(element, [ 'data-info:foobar' ]);\n     */\n\n\n    function addAttributes(element, attributes) {\n      attributes.forEach(function (attribute) {\n        element.setAttribute(attribute.split(':')[0], attribute.split(':')[1] || '');\n      });\n    }\n  };\n  /**\n   * Helper used to get the position which will be applied to the popper\n   * @method\n   * @memberof Popper\n   * @param config {HTMLElement} popper element\n   * @param reference {HTMLElement} reference element\n   * @returns {String} position\n   */\n\n\n  Popper.prototype._getPosition = function (popper, reference) {\n    var container = getOffsetParent(reference);\n\n    if (this._options.forceAbsolute) {\n      return 'absolute';\n    } // Decide if the popper will be fixed\n    // If the reference element is inside a fixed context, the popper will be fixed as well to allow them to scroll together\n\n\n    var isParentFixed = isFixed(reference, container);\n    return isParentFixed ? 'fixed' : 'absolute';\n  };\n  /**\n   * Get offsets to the popper\n   * @method\n   * @memberof Popper\n   * @access private\n   * @param {Element} popper - the popper element\n   * @param {Element} reference - the reference element (the popper will be relative to this)\n   * @returns {Object} An object containing the offsets which will be applied to the popper\n   */\n\n\n  Popper.prototype._getOffsets = function (popper, reference, placement) {\n    placement = placement.split('-')[0];\n    var popperOffsets = {};\n    popperOffsets.position = this.state.position;\n    var isParentFixed = popperOffsets.position === 'fixed'; //\n    // Get reference element position\n    //\n\n    var referenceOffsets = getOffsetRectRelativeToCustomParent(reference, getOffsetParent(popper), isParentFixed); //\n    // Get popper sizes\n    //\n\n    var popperRect = getOuterSizes(popper); //\n    // Compute offsets of popper\n    //\n    // depending by the popper placement we have to compute its offsets slightly differently\n\n    if (['right', 'left'].indexOf(placement) !== -1) {\n      popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;\n\n      if (placement === 'left') {\n        popperOffsets.left = referenceOffsets.left - popperRect.width;\n      } else {\n        popperOffsets.left = referenceOffsets.right;\n      }\n    } else {\n      popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;\n\n      if (placement === 'top') {\n        popperOffsets.top = referenceOffsets.top - popperRect.height;\n      } else {\n        popperOffsets.top = referenceOffsets.bottom;\n      }\n    } // Add width and height to our offsets object\n\n\n    popperOffsets.width = popperRect.width;\n    popperOffsets.height = popperRect.height;\n    return {\n      popper: popperOffsets,\n      reference: referenceOffsets\n    };\n  };\n  /**\n   * Setup needed event listeners used to update the popper position\n   * @method\n   * @memberof Popper\n   * @access private\n   */\n\n\n  Popper.prototype._setupEventListeners = function () {\n    // NOTE: 1 DOM access here\n    this.state.updateBound = this.update.bind(this);\n    root.addEventListener('resize', this.state.updateBound); // if the boundariesElement is window we don't need to listen for the scroll event\n\n    if (this._options.boundariesElement !== 'window') {\n      var target = getScrollParent(this._reference); // here it could be both `body` or `documentElement` thanks to Firefox, we then check both\n\n      if (target === root.document.body || target === root.document.documentElement) {\n        target = root;\n      }\n\n      target.addEventListener('scroll', this.state.updateBound);\n      this.state.scrollTarget = target;\n    }\n  };\n  /**\n   * Remove event listeners used to update the popper position\n   * @method\n   * @memberof Popper\n   * @access private\n   */\n\n\n  Popper.prototype._removeEventListeners = function () {\n    // NOTE: 1 DOM access here\n    root.removeEventListener('resize', this.state.updateBound);\n\n    if (this._options.boundariesElement !== 'window' && this.state.scrollTarget) {\n      this.state.scrollTarget.removeEventListener('scroll', this.state.updateBound);\n      this.state.scrollTarget = null;\n    }\n\n    this.state.updateBound = null;\n  };\n  /**\n   * Computed the boundaries limits and return them\n   * @method\n   * @memberof Popper\n   * @access private\n   * @param {Object} data - Object containing the property \"offsets\" generated by `_getOffsets`\n   * @param {Number} padding - Boundaries padding\n   * @param {Element} boundariesElement - Element used to define the boundaries\n   * @returns {Object} Coordinates of the boundaries\n   */\n\n\n  Popper.prototype._getBoundaries = function (data, padding, boundariesElement) {\n    // NOTE: 1 DOM access here\n    var boundaries = {};\n    var width, height;\n\n    if (boundariesElement === 'window') {\n      var body = root.document.body,\n          html = root.document.documentElement;\n      height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n      width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n      boundaries = {\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n    } else if (boundariesElement === 'viewport') {\n      var offsetParent = getOffsetParent(this._popper);\n      var scrollParent = getScrollParent(this._popper);\n      var offsetParentRect = getOffsetRect(offsetParent); // Thanks the fucking native API, `document.body.scrollTop` & `document.documentElement.scrollTop`\n\n      var getScrollTopValue = function getScrollTopValue(element) {\n        return element == document.body ? Math.max(document.documentElement.scrollTop, document.body.scrollTop) : element.scrollTop;\n      };\n\n      var getScrollLeftValue = function getScrollLeftValue(element) {\n        return element == document.body ? Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) : element.scrollLeft;\n      }; // if the popper is fixed we don't have to substract scrolling from the boundaries\n\n\n      var scrollTop = data.offsets.popper.position === 'fixed' ? 0 : getScrollTopValue(scrollParent);\n      var scrollLeft = data.offsets.popper.position === 'fixed' ? 0 : getScrollLeftValue(scrollParent);\n      boundaries = {\n        top: 0 - (offsetParentRect.top - scrollTop),\n        right: root.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),\n        bottom: root.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),\n        left: 0 - (offsetParentRect.left - scrollLeft)\n      };\n    } else {\n      if (getOffsetParent(this._popper) === boundariesElement) {\n        boundaries = {\n          top: 0,\n          left: 0,\n          right: boundariesElement.clientWidth,\n          bottom: boundariesElement.clientHeight\n        };\n      } else {\n        boundaries = getOffsetRect(boundariesElement);\n      }\n    }\n\n    boundaries.left += padding;\n    boundaries.right -= padding;\n    boundaries.top = boundaries.top + padding;\n    boundaries.bottom = boundaries.bottom - padding;\n    return boundaries;\n  };\n  /**\n   * Loop trough the list of modifiers and run them in order, each of them will then edit the data object\n   * @method\n   * @memberof Popper\n   * @access public\n   * @param {Object} data\n   * @param {Array} modifiers\n   * @param {Function} ends\n   */\n\n\n  Popper.prototype.runModifiers = function (data, modifiers, ends) {\n    var modifiersToRun = modifiers.slice();\n\n    if (ends !== undefined) {\n      modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));\n    }\n\n    modifiersToRun.forEach(function (modifier) {\n      if (isFunction(modifier)) {\n        data = modifier.call(this, data);\n      }\n    }.bind(this));\n    return data;\n  };\n  /**\n   * Helper used to know if the given modifier depends from another one.\n   * @method\n   * @memberof Popper\n   * @param {String} requesting - name of requesting modifier\n   * @param {String} requested - name of requested modifier\n   * @returns {Boolean}\n   */\n\n\n  Popper.prototype.isModifierRequired = function (requesting, requested) {\n    var index = getArrayKeyIndex(this._options.modifiers, requesting);\n    return !!this._options.modifiers.slice(0, index).filter(function (modifier) {\n      return modifier === requested;\n    }).length;\n  }; //\n  // Modifiers\n  //\n\n  /**\n   * Modifiers list\n   * @namespace Popper.modifiers\n   * @memberof Popper\n   * @type {Object}\n   */\n\n\n  Popper.prototype.modifiers = {};\n  /**\n   * Apply the computed styles to the popper element\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @returns {Object} The same data object\n   */\n\n  Popper.prototype.modifiers.applyStyle = function (data) {\n    // apply the final offsets to the popper\n    // NOTE: 1 DOM access here\n    var styles = {\n      position: data.offsets.popper.position\n    }; // round top and left to avoid blurry text\n\n    var left = Math.round(data.offsets.popper.left);\n    var top = Math.round(data.offsets.popper.top); // if gpuAcceleration is set to true and transform is supported, we use `translate3d` to apply the position to the popper\n    // we automatically use the supported prefixed version if needed\n\n    var prefixedProperty;\n\n    if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName('transform'))) {\n      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n      styles.top = 0;\n      styles.left = 0;\n    } // othwerise, we use the standard `left` and `top` properties\n    else {\n        styles.left = left;\n        styles.top = top;\n      } // any property present in `data.styles` will be applied to the popper,\n    // in this way we can make the 3rd party modifiers add custom styles to it\n    // Be aware, modifiers could override the properties defined in the previous\n    // lines of this modifier!\n\n\n    Object.assign(styles, data.styles);\n    setStyle(this._popper, styles); // set an attribute which will be useful to style the tooltip (use it to properly position its arrow)\n    // NOTE: 1 DOM access here\n\n    this._popper.setAttribute('x-placement', data.placement); // if the arrow modifier is required and the arrow style has been computed, apply the arrow style\n\n\n    if (this.isModifierRequired(this.modifiers.applyStyle, this.modifiers.arrow) && data.offsets.arrow) {\n      setStyle(data.arrowElement, data.offsets.arrow);\n    }\n\n    return data;\n  };\n  /**\n   * Modifier used to shift the popper on the start or end of its reference element side\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @returns {Object} The data object, properly modified\n   */\n\n\n  Popper.prototype.modifiers.shift = function (data) {\n    var placement = data.placement;\n    var basePlacement = placement.split('-')[0];\n    var shiftVariation = placement.split('-')[1]; // if shift shiftVariation is specified, run the modifier\n\n    if (shiftVariation) {\n      var reference = data.offsets.reference;\n      var popper = getPopperClientRect(data.offsets.popper);\n      var shiftOffsets = {\n        y: {\n          start: {\n            top: reference.top\n          },\n          end: {\n            top: reference.top + reference.height - popper.height\n          }\n        },\n        x: {\n          start: {\n            left: reference.left\n          },\n          end: {\n            left: reference.left + reference.width - popper.width\n          }\n        }\n      };\n      var axis = ['bottom', 'top'].indexOf(basePlacement) !== -1 ? 'x' : 'y';\n      data.offsets.popper = Object.assign(popper, shiftOffsets[axis][shiftVariation]);\n    }\n\n    return data;\n  };\n  /**\n   * Modifier used to make sure the popper does not overflows from it's boundaries\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @returns {Object} The data object, properly modified\n   */\n\n\n  Popper.prototype.modifiers.preventOverflow = function (data) {\n    var order = this._options.preventOverflowOrder;\n    var popper = getPopperClientRect(data.offsets.popper);\n    var check = {\n      left: function left() {\n        var left = popper.left;\n\n        if (popper.left < data.boundaries.left) {\n          left = Math.max(popper.left, data.boundaries.left);\n        }\n\n        return {\n          left: left\n        };\n      },\n      right: function right() {\n        var left = popper.left;\n\n        if (popper.right > data.boundaries.right) {\n          left = Math.min(popper.left, data.boundaries.right - popper.width);\n        }\n\n        return {\n          left: left\n        };\n      },\n      top: function top() {\n        var top = popper.top;\n\n        if (popper.top < data.boundaries.top) {\n          top = Math.max(popper.top, data.boundaries.top);\n        }\n\n        return {\n          top: top\n        };\n      },\n      bottom: function bottom() {\n        var top = popper.top;\n\n        if (popper.bottom > data.boundaries.bottom) {\n          top = Math.min(popper.top, data.boundaries.bottom - popper.height);\n        }\n\n        return {\n          top: top\n        };\n      }\n    };\n    order.forEach(function (direction) {\n      data.offsets.popper = Object.assign(popper, check[direction]());\n    });\n    return data;\n  };\n  /**\n   * Modifier used to make sure the popper is always near its reference\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by _update method\n   * @returns {Object} The data object, properly modified\n   */\n\n\n  Popper.prototype.modifiers.keepTogether = function (data) {\n    var popper = getPopperClientRect(data.offsets.popper);\n    var reference = data.offsets.reference;\n    var f = Math.floor;\n\n    if (popper.right < f(reference.left)) {\n      data.offsets.popper.left = f(reference.left) - popper.width;\n    }\n\n    if (popper.left > f(reference.right)) {\n      data.offsets.popper.left = f(reference.right);\n    }\n\n    if (popper.bottom < f(reference.top)) {\n      data.offsets.popper.top = f(reference.top) - popper.height;\n    }\n\n    if (popper.top > f(reference.bottom)) {\n      data.offsets.popper.top = f(reference.bottom);\n    }\n\n    return data;\n  };\n  /**\n   * Modifier used to flip the placement of the popper when the latter is starting overlapping its reference element.\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * **NOTE:** This modifier will run all its previous modifiers everytime it tries to flip the popper!\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by _update method\n   * @returns {Object} The data object, properly modified\n   */\n\n\n  Popper.prototype.modifiers.flip = function (data) {\n    // check if preventOverflow is in the list of modifiers before the flip modifier.\n    // otherwise flip would not work as expected.\n    if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {\n      console.warn('WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!');\n      return data;\n    }\n\n    if (data.flipped && data.placement === data._originalPlacement) {\n      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n      return data;\n    }\n\n    var placement = data.placement.split('-')[0];\n    var placementOpposite = getOppositePlacement(placement);\n    var variation = data.placement.split('-')[1] || '';\n    var flipOrder = [];\n\n    if (this._options.flipBehavior === 'flip') {\n      flipOrder = [placement, placementOpposite];\n    } else {\n      flipOrder = this._options.flipBehavior;\n    }\n\n    flipOrder.forEach(function (step, index) {\n      if (placement !== step || flipOrder.length === index + 1) {\n        return;\n      }\n\n      placement = data.placement.split('-')[0];\n      placementOpposite = getOppositePlacement(placement);\n      var popperOffsets = getPopperClientRect(data.offsets.popper); // this boolean is used to distinguish right and bottom from top and left\n      // they need different computations to get flipped\n\n      var a = ['right', 'bottom'].indexOf(placement) !== -1; // using Math.floor because the reference offsets may contain decimals we are not going to consider here\n\n      if (a && Math.floor(data.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) || !a && Math.floor(data.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])) {\n        // we'll use this boolean to detect any flip loop\n        data.flipped = true;\n        data.placement = flipOrder[index + 1];\n\n        if (variation) {\n          data.placement += '-' + variation;\n        }\n\n        data.offsets.popper = this._getOffsets(this._popper, this._reference, data.placement).popper;\n        data = this.runModifiers(data, this._options.modifiers, this._flip);\n      }\n    }.bind(this));\n    return data;\n  };\n  /**\n   * Modifier used to add an offset to the popper, useful if you more granularity positioning your popper.\n   * The offsets will shift the popper on the side of its reference element.\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by _update method\n   * @returns {Object} The data object, properly modified\n   */\n\n\n  Popper.prototype.modifiers.offset = function (data) {\n    var offset = this._options.offset;\n    var popper = data.offsets.popper;\n\n    if (data.placement.indexOf('left') !== -1) {\n      popper.top -= offset;\n    } else if (data.placement.indexOf('right') !== -1) {\n      popper.top += offset;\n    } else if (data.placement.indexOf('top') !== -1) {\n      popper.left -= offset;\n    } else if (data.placement.indexOf('bottom') !== -1) {\n      popper.left += offset;\n    }\n\n    return data;\n  };\n  /**\n   * Modifier used to move the arrows on the edge of the popper to make sure them are always between the popper and the reference element\n   * It will use the CSS outer size of the arrow element to know how many pixels of conjuction are needed\n   * @method\n   * @memberof Popper.modifiers\n   * @argument {Object} data - The data object generated by _update method\n   * @returns {Object} The data object, properly modified\n   */\n\n\n  Popper.prototype.modifiers.arrow = function (data) {\n    var arrow = this._options.arrowElement;\n    var arrowOffset = this._options.arrowOffset; // if the arrowElement is a string, suppose it's a CSS selector\n\n    if (typeof arrow === 'string') {\n      arrow = this._popper.querySelector(arrow);\n    } // if arrow element is not found, don't run the modifier\n\n\n    if (!arrow) {\n      return data;\n    } // the arrow element must be child of its popper\n\n\n    if (!this._popper.contains(arrow)) {\n      console.warn('WARNING: `arrowElement` must be child of its popper element!');\n      return data;\n    } // arrow depends on keepTogether in order to work\n\n\n    if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {\n      console.warn('WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!');\n      return data;\n    }\n\n    var arrowStyle = {};\n    var placement = data.placement.split('-')[0];\n    var popper = getPopperClientRect(data.offsets.popper);\n    var reference = data.offsets.reference;\n    var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n    var len = isVertical ? 'height' : 'width';\n    var side = isVertical ? 'top' : 'left';\n    var translate = isVertical ? 'translateY' : 'translateX';\n    var altSide = isVertical ? 'left' : 'top';\n    var opSide = isVertical ? 'bottom' : 'right';\n    var arrowSize = getOuterSizes(arrow)[len]; //\n    // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction\n    //\n    // top/left side\n\n    if (reference[opSide] - arrowSize < popper[side]) {\n      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowSize);\n    } // bottom/right side\n\n\n    if (reference[side] + arrowSize > popper[opSide]) {\n      data.offsets.popper[side] += reference[side] + arrowSize - popper[opSide];\n    } // compute center of the popper\n\n\n    var center = reference[side] + (arrowOffset || reference[len] / 2 - arrowSize / 2);\n    var sideValue = center - popper[side]; // prevent arrow from being placed not contiguously to its popper\n\n    sideValue = Math.max(Math.min(popper[len] - arrowSize - 8, sideValue), 8);\n    arrowStyle[side] = sideValue;\n    arrowStyle[altSide] = ''; // make sure to remove any old style from the arrow\n\n    data.offsets.arrow = arrowStyle;\n    data.arrowElement = arrow;\n    return data;\n  }; //\n  // Helpers\n  //\n\n  /**\n   * Get the outer sizes of the given element (offset size + margins)\n   * @function\n   * @ignore\n   * @argument {Element} element\n   * @returns {Object} object containing width and height properties\n   */\n\n\n  function getOuterSizes(element) {\n    // NOTE: 1 DOM access here\n    var _display = element.style.display,\n        _visibility = element.style.visibility;\n    element.style.display = 'block';\n    element.style.visibility = 'hidden';\n    var calcWidthToForceRepaint = element.offsetWidth; // original method\n\n    var styles = root.getComputedStyle(element);\n    var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n    var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n    var result = {\n      width: element.offsetWidth + y,\n      height: element.offsetHeight + x\n    }; // reset element styles\n\n    element.style.display = _display;\n    element.style.visibility = _visibility;\n    return result;\n  }\n  /**\n   * Get the opposite placement of the given one/\n   * @function\n   * @ignore\n   * @argument {String} placement\n   * @returns {String} flipped placement\n   */\n\n\n  function getOppositePlacement(placement) {\n    var hash = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash[matched];\n    });\n  }\n  /**\n   * Given the popper offsets, generate an output similar to getBoundingClientRect\n   * @function\n   * @ignore\n   * @argument {Object} popperOffsets\n   * @returns {Object} ClientRect like output\n   */\n\n\n  function getPopperClientRect(popperOffsets) {\n    var offsets = Object.assign({}, popperOffsets);\n    offsets.right = offsets.left + offsets.width;\n    offsets.bottom = offsets.top + offsets.height;\n    return offsets;\n  }\n  /**\n   * Given an array and the key to find, returns its index\n   * @function\n   * @ignore\n   * @argument {Array} arr\n   * @argument keyToFind\n   * @returns index or null\n   */\n\n\n  function getArrayKeyIndex(arr, keyToFind) {\n    var i = 0,\n        key;\n\n    for (key in arr) {\n      if (arr[key] === keyToFind) {\n        return i;\n      }\n\n      i++;\n    }\n\n    return null;\n  }\n  /**\n   * Get CSS computed property of the given element\n   * @function\n   * @ignore\n   * @argument {Eement} element\n   * @argument {String} property\n   */\n\n\n  function getStyleComputedProperty(element, property) {\n    // NOTE: 1 DOM access here\n    var css = root.getComputedStyle(element, null);\n    return css[property];\n  }\n  /**\n   * Returns the offset parent of the given element\n   * @function\n   * @ignore\n   * @argument {Element} element\n   * @returns {Element} offset parent\n   */\n\n\n  function getOffsetParent(element) {\n    // NOTE: 1 DOM access here\n    var offsetParent = element.offsetParent;\n    return offsetParent === root.document.body || !offsetParent ? root.document.documentElement : offsetParent;\n  }\n  /**\n   * Returns the scrolling parent of the given element\n   * @function\n   * @ignore\n   * @argument {Element} element\n   * @returns {Element} offset parent\n   */\n\n\n  function getScrollParent(element) {\n    var parent = element.parentNode;\n\n    if (!parent) {\n      return element;\n    }\n\n    if (parent === root.document) {\n      // Firefox puts the scrollTOp value on `documentElement` instead of `body`, we then check which of them is\n      // greater than 0 and return the proper element\n      if (root.document.body.scrollTop || root.document.body.scrollLeft) {\n        return root.document.body;\n      } else {\n        return root.document.documentElement;\n      }\n    } // Firefox want us to check `-x` and `-y` variations as well\n\n\n    if (['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow')) !== -1 || ['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow-x')) !== -1 || ['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow-y')) !== -1) {\n      // If the detected scrollParent is body, we perform an additional check on its parentNode\n      // in this way we'll get body if the browser is Chrome-ish, or documentElement otherwise\n      // fixes issue #65\n      return parent;\n    }\n\n    return getScrollParent(element.parentNode);\n  }\n  /**\n   * Check if the given element is fixed or is inside a fixed parent\n   * @function\n   * @ignore\n   * @argument {Element} element\n   * @argument {Element} customContainer\n   * @returns {Boolean} answer to \"isFixed?\"\n   */\n\n\n  function isFixed(element) {\n    if (element === root.document.body) {\n      return false;\n    }\n\n    if (getStyleComputedProperty(element, 'position') === 'fixed') {\n      return true;\n    }\n\n    return element.parentNode ? isFixed(element.parentNode) : element;\n  }\n  /**\n   * Set the style to the given popper\n   * @function\n   * @ignore\n   * @argument {Element} element - Element to apply the style to\n   * @argument {Object} styles - Object with a list of properties and values which will be applied to the element\n   */\n\n\n  function setStyle(element, styles) {\n    function is_numeric(n) {\n      return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    Object.keys(styles).forEach(function (prop) {\n      var unit = ''; // add unit if the value is numeric and is one of the following\n\n      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && is_numeric(styles[prop])) {\n        unit = 'px';\n      }\n\n      element.style[prop] = styles[prop] + unit;\n    });\n  }\n  /**\n   * Check if the given variable is a function\n   * @function\n   * @ignore\n   * @argument {*} functionToCheck - variable to check\n   * @returns {Boolean} answer to: is a function?\n   */\n\n\n  function isFunction(functionToCheck) {\n    var getType = {};\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n  }\n  /**\n   * Get the position of the given element, relative to its offset parent\n   * @function\n   * @ignore\n   * @param {Element} element\n   * @return {Object} position - Coordinates of the element and its `scrollTop`\n   */\n\n\n  function getOffsetRect(element) {\n    var elementRect = {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      left: element.offsetLeft,\n      top: element.offsetTop\n    };\n    elementRect.right = elementRect.left + elementRect.width;\n    elementRect.bottom = elementRect.top + elementRect.height; // position\n\n    return elementRect;\n  }\n  /**\n   * Get bounding client rect of given element\n   * @function\n   * @ignore\n   * @param {HTMLElement} element\n   * @return {Object} client rect\n   */\n\n\n  function getBoundingClientRect(element) {\n    var rect = element.getBoundingClientRect(); // whether the IE version is lower than 11\n\n    var isIE = navigator.userAgent.indexOf(\"MSIE\") != -1; // fix ie document bounding top always 0 bug\n\n    var rectTop = isIE && element.tagName === 'HTML' ? -element.scrollTop : rect.top;\n    return {\n      left: rect.left,\n      top: rectTop,\n      right: rect.right,\n      bottom: rect.bottom,\n      width: rect.right - rect.left,\n      height: rect.bottom - rectTop\n    };\n  }\n  /**\n   * Given an element and one of its parents, return the offset\n   * @function\n   * @ignore\n   * @param {HTMLElement} element\n   * @param {HTMLElement} parent\n   * @return {Object} rect\n   */\n\n\n  function getOffsetRectRelativeToCustomParent(element, parent, fixed) {\n    var elementRect = getBoundingClientRect(element);\n    var parentRect = getBoundingClientRect(parent);\n\n    if (fixed) {\n      var scrollParent = getScrollParent(parent);\n      parentRect.top += scrollParent.scrollTop;\n      parentRect.bottom += scrollParent.scrollTop;\n      parentRect.left += scrollParent.scrollLeft;\n      parentRect.right += scrollParent.scrollLeft;\n    }\n\n    var rect = {\n      top: elementRect.top - parentRect.top,\n      left: elementRect.left - parentRect.left,\n      bottom: elementRect.top - parentRect.top + elementRect.height,\n      right: elementRect.left - parentRect.left + elementRect.width,\n      width: elementRect.width,\n      height: elementRect.height\n    };\n    return rect;\n  }\n  /**\n   * Get the prefixed supported property name\n   * @function\n   * @ignore\n   * @argument {String} property (camelCase)\n   * @returns {String} prefixed property (camelCase)\n   */\n\n\n  function getSupportedPropertyName(property) {\n    var prefixes = ['', 'ms', 'webkit', 'moz', 'o'];\n\n    for (var i = 0; i < prefixes.length; i++) {\n      var toCheck = prefixes[i] ? prefixes[i] + property.charAt(0).toUpperCase() + property.slice(1) : property;\n\n      if (typeof root.document.body.style[toCheck] !== 'undefined') {\n        return toCheck;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * The Object.assign() method is used to copy the values of all enumerable own properties from one or more source\n   * objects to a target object. It will return the target object.\n   * This polyfill doesn't support symbol properties, since ES5 doesn't have symbols anyway\n   * Source: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n   * @function\n   * @ignore\n   */\n\n\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: function value(target) {\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert first argument to object');\n        }\n\n        var to = Object(target);\n\n        for (var i = 1; i < arguments.length; i++) {\n          var nextSource = arguments[i];\n\n          if (nextSource === undefined || nextSource === null) {\n            continue;\n          }\n\n          nextSource = Object(nextSource);\n          var keysArray = Object.keys(nextSource);\n\n          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n            var nextKey = keysArray[nextIndex];\n            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n            if (desc !== undefined && desc.enumerable) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n\n        return to;\n      }\n    });\n  }\n\n  return Popper;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/popper.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/popup/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/popup/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.PopupManager = undefined;\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _merge = __webpack_require__(/*! element-ui/lib/utils/merge */ \"./node_modules/element-ui/lib/utils/merge.js\");\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _popupManager = __webpack_require__(/*! element-ui/lib/utils/popup/popup-manager */ \"./node_modules/element-ui/lib/utils/popup/popup-manager.js\");\n\nvar _popupManager2 = _interopRequireDefault(_popupManager);\n\nvar _scrollbarWidth = __webpack_require__(/*! ../scrollbar-width */ \"./node_modules/element-ui/lib/utils/scrollbar-width.js\");\n\nvar _scrollbarWidth2 = _interopRequireDefault(_scrollbarWidth);\n\nvar _dom = __webpack_require__(/*! ../dom */ \"./node_modules/element-ui/lib/utils/dom.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar idSeed = 1;\nvar scrollBarWidth = void 0;\nexports.default = {\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    openDelay: {},\n    closeDelay: {},\n    zIndex: {},\n    modal: {\n      type: Boolean,\n      default: false\n    },\n    modalFade: {\n      type: Boolean,\n      default: true\n    },\n    modalClass: {},\n    modalAppendToBody: {\n      type: Boolean,\n      default: false\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: false\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: false\n    }\n  },\n  beforeMount: function beforeMount() {\n    this._popupId = 'popup-' + idSeed++;\n\n    _popupManager2.default.register(this._popupId, this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    _popupManager2.default.deregister(this._popupId);\n\n    _popupManager2.default.closeModal(this._popupId);\n\n    this.restoreBodyStyle();\n  },\n  data: function data() {\n    return {\n      opened: false,\n      bodyPaddingRight: null,\n      computedBodyPaddingRight: 0,\n      withoutHiddenClass: true,\n      rendered: false\n    };\n  },\n  watch: {\n    visible: function visible(val) {\n      var _this = this;\n\n      if (val) {\n        if (this._opening) return;\n\n        if (!this.rendered) {\n          this.rendered = true;\n\n          _vue2.default.nextTick(function () {\n            _this.open();\n          });\n        } else {\n          this.open();\n        }\n      } else {\n        this.close();\n      }\n    }\n  },\n  methods: {\n    open: function open(options) {\n      var _this2 = this;\n\n      if (!this.rendered) {\n        this.rendered = true;\n      }\n\n      var props = (0, _merge2.default)({}, this.$props || this, options);\n\n      if (this._closeTimer) {\n        clearTimeout(this._closeTimer);\n        this._closeTimer = null;\n      }\n\n      clearTimeout(this._openTimer);\n      var openDelay = Number(props.openDelay);\n\n      if (openDelay > 0) {\n        this._openTimer = setTimeout(function () {\n          _this2._openTimer = null;\n\n          _this2.doOpen(props);\n        }, openDelay);\n      } else {\n        this.doOpen(props);\n      }\n    },\n    doOpen: function doOpen(props) {\n      if (this.$isServer) return;\n      if (this.willOpen && !this.willOpen()) return;\n      if (this.opened) return;\n      this._opening = true;\n      var dom = this.$el;\n      var modal = props.modal;\n      var zIndex = props.zIndex;\n\n      if (zIndex) {\n        _popupManager2.default.zIndex = zIndex;\n      }\n\n      if (modal) {\n        if (this._closing) {\n          _popupManager2.default.closeModal(this._popupId);\n\n          this._closing = false;\n        }\n\n        _popupManager2.default.openModal(this._popupId, _popupManager2.default.nextZIndex(), this.modalAppendToBody ? undefined : dom, props.modalClass, props.modalFade);\n\n        if (props.lockScroll) {\n          this.withoutHiddenClass = !(0, _dom.hasClass)(document.body, 'el-popup-parent--hidden');\n\n          if (this.withoutHiddenClass) {\n            this.bodyPaddingRight = document.body.style.paddingRight;\n            this.computedBodyPaddingRight = parseInt((0, _dom.getStyle)(document.body, 'paddingRight'), 10);\n          }\n\n          scrollBarWidth = (0, _scrollbarWidth2.default)();\n          var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n          var bodyOverflowY = (0, _dom.getStyle)(document.body, 'overflowY');\n\n          if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === 'scroll') && this.withoutHiddenClass) {\n            document.body.style.paddingRight = this.computedBodyPaddingRight + scrollBarWidth + 'px';\n          }\n\n          (0, _dom.addClass)(document.body, 'el-popup-parent--hidden');\n        }\n      }\n\n      if (getComputedStyle(dom).position === 'static') {\n        dom.style.position = 'absolute';\n      }\n\n      dom.style.zIndex = _popupManager2.default.nextZIndex();\n      this.opened = true;\n      this.onOpen && this.onOpen();\n      this.doAfterOpen();\n    },\n    doAfterOpen: function doAfterOpen() {\n      this._opening = false;\n    },\n    close: function close() {\n      var _this3 = this;\n\n      if (this.willClose && !this.willClose()) return;\n\n      if (this._openTimer !== null) {\n        clearTimeout(this._openTimer);\n        this._openTimer = null;\n      }\n\n      clearTimeout(this._closeTimer);\n      var closeDelay = Number(this.closeDelay);\n\n      if (closeDelay > 0) {\n        this._closeTimer = setTimeout(function () {\n          _this3._closeTimer = null;\n\n          _this3.doClose();\n        }, closeDelay);\n      } else {\n        this.doClose();\n      }\n    },\n    doClose: function doClose() {\n      this._closing = true;\n      this.onClose && this.onClose();\n\n      if (this.lockScroll) {\n        setTimeout(this.restoreBodyStyle, 200);\n      }\n\n      this.opened = false;\n      this.doAfterClose();\n    },\n    doAfterClose: function doAfterClose() {\n      _popupManager2.default.closeModal(this._popupId);\n\n      this._closing = false;\n    },\n    restoreBodyStyle: function restoreBodyStyle() {\n      if (this.modal && this.withoutHiddenClass) {\n        document.body.style.paddingRight = this.bodyPaddingRight;\n        (0, _dom.removeClass)(document.body, 'el-popup-parent--hidden');\n      }\n\n      this.withoutHiddenClass = true;\n    }\n  }\n};\nexports.PopupManager = _popupManager2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/popup/index.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/popup/popup-manager.js":
/*!******************************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/popup/popup-manager.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _dom = __webpack_require__(/*! element-ui/lib/utils/dom */ \"./node_modules/element-ui/lib/utils/dom.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hasModal = false;\nvar hasInitZIndex = false;\nvar zIndex = void 0;\n\nvar getModal = function getModal() {\n  if (_vue2.default.prototype.$isServer) return;\n  var modalDom = PopupManager.modalDom;\n\n  if (modalDom) {\n    hasModal = true;\n  } else {\n    hasModal = false;\n    modalDom = document.createElement('div');\n    PopupManager.modalDom = modalDom;\n    modalDom.addEventListener('touchmove', function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    });\n    modalDom.addEventListener('click', function () {\n      PopupManager.doOnModalClick && PopupManager.doOnModalClick();\n    });\n  }\n\n  return modalDom;\n};\n\nvar instances = {};\nvar PopupManager = {\n  modalFade: true,\n  getInstance: function getInstance(id) {\n    return instances[id];\n  },\n  register: function register(id, instance) {\n    if (id && instance) {\n      instances[id] = instance;\n    }\n  },\n  deregister: function deregister(id) {\n    if (id) {\n      instances[id] = null;\n      delete instances[id];\n    }\n  },\n  nextZIndex: function nextZIndex() {\n    return PopupManager.zIndex++;\n  },\n  modalStack: [],\n  doOnModalClick: function doOnModalClick() {\n    var topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];\n    if (!topItem) return;\n    var instance = PopupManager.getInstance(topItem.id);\n\n    if (instance && instance.closeOnClickModal) {\n      instance.close();\n    }\n  },\n  openModal: function openModal(id, zIndex, dom, modalClass, modalFade) {\n    if (_vue2.default.prototype.$isServer) return;\n    if (!id || zIndex === undefined) return;\n    this.modalFade = modalFade;\n    var modalStack = this.modalStack;\n\n    for (var i = 0, j = modalStack.length; i < j; i++) {\n      var item = modalStack[i];\n\n      if (item.id === id) {\n        return;\n      }\n    }\n\n    var modalDom = getModal();\n    (0, _dom.addClass)(modalDom, 'v-modal');\n\n    if (this.modalFade && !hasModal) {\n      (0, _dom.addClass)(modalDom, 'v-modal-enter');\n    }\n\n    if (modalClass) {\n      var classArr = modalClass.trim().split(/\\s+/);\n      classArr.forEach(function (item) {\n        return (0, _dom.addClass)(modalDom, item);\n      });\n    }\n\n    setTimeout(function () {\n      (0, _dom.removeClass)(modalDom, 'v-modal-enter');\n    }, 200);\n\n    if (dom && dom.parentNode && dom.parentNode.nodeType !== 11) {\n      dom.parentNode.appendChild(modalDom);\n    } else {\n      document.body.appendChild(modalDom);\n    }\n\n    if (zIndex) {\n      modalDom.style.zIndex = zIndex;\n    }\n\n    modalDom.tabIndex = 0;\n    modalDom.style.display = '';\n    this.modalStack.push({\n      id: id,\n      zIndex: zIndex,\n      modalClass: modalClass\n    });\n  },\n  closeModal: function closeModal(id) {\n    var modalStack = this.modalStack;\n    var modalDom = getModal();\n\n    if (modalStack.length > 0) {\n      var topItem = modalStack[modalStack.length - 1];\n\n      if (topItem.id === id) {\n        if (topItem.modalClass) {\n          var classArr = topItem.modalClass.trim().split(/\\s+/);\n          classArr.forEach(function (item) {\n            return (0, _dom.removeClass)(modalDom, item);\n          });\n        }\n\n        modalStack.pop();\n\n        if (modalStack.length > 0) {\n          modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;\n        }\n      } else {\n        for (var i = modalStack.length - 1; i >= 0; i--) {\n          if (modalStack[i].id === id) {\n            modalStack.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    if (modalStack.length === 0) {\n      if (this.modalFade) {\n        (0, _dom.addClass)(modalDom, 'v-modal-leave');\n      }\n\n      setTimeout(function () {\n        if (modalStack.length === 0) {\n          if (modalDom.parentNode) modalDom.parentNode.removeChild(modalDom);\n          modalDom.style.display = 'none';\n          PopupManager.modalDom = undefined;\n        }\n\n        (0, _dom.removeClass)(modalDom, 'v-modal-leave');\n      }, 200);\n    }\n  }\n};\nObject.defineProperty(PopupManager, 'zIndex', {\n  configurable: true,\n  get: function get() {\n    if (!hasInitZIndex) {\n      zIndex = zIndex || (_vue2.default.prototype.$ELEMENT || {}).zIndex || 2000;\n      hasInitZIndex = true;\n    }\n\n    return zIndex;\n  },\n  set: function set(value) {\n    zIndex = value;\n  }\n});\n\nvar getTopPopup = function getTopPopup() {\n  if (_vue2.default.prototype.$isServer) return;\n\n  if (PopupManager.modalStack.length > 0) {\n    var topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];\n    if (!topPopup) return;\n    var instance = PopupManager.getInstance(topPopup.id);\n    return instance;\n  }\n};\n\nif (!_vue2.default.prototype.$isServer) {\n  // handle `esc` key when the popup is shown\n  window.addEventListener('keydown', function (event) {\n    if (event.keyCode === 27) {\n      var topPopup = getTopPopup();\n\n      if (topPopup && topPopup.closeOnPressEscape) {\n        topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction('cancel') : topPopup.close();\n      }\n    }\n  });\n}\n\nexports.default = PopupManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/popup/popup-manager.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/scrollbar-width.js":
/*!**************************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/scrollbar-width.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nexports.default = function () {\n  if (_vue2.default.prototype.$isServer) return 0;\n  if (scrollBarWidth !== undefined) return scrollBarWidth;\n  var outer = document.createElement('div');\n  outer.className = 'el-scrollbar__wrap';\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.position = 'absolute';\n  outer.style.top = '-9999px';\n  document.body.appendChild(outer);\n  var widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = 'scroll';\n  var inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n  var widthWithScroll = inner.offsetWidth;\n  outer.parentNode.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n  return scrollBarWidth;\n};\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar scrollBarWidth = void 0;\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC11aS9saWIvdXRpbHMvc2Nyb2xsYmFyLXdpZHRoLmpzP2U2MmQiXSwibmFtZXMiOlsiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX3Z1ZTIiLCJwcm90b3R5cGUiLCIkaXNTZXJ2ZXIiLCJzY3JvbGxCYXJXaWR0aCIsInVuZGVmaW5lZCIsIm91dGVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJ2aXNpYmlsaXR5Iiwid2lkdGgiLCJwb3NpdGlvbiIsInRvcCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsIndpZHRoTm9TY3JvbGwiLCJvZmZzZXRXaWR0aCIsIm92ZXJmbG93IiwiaW5uZXIiLCJ3aWR0aFdpdGhTY3JvbGwiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJfdnVlIiwicmVxdWlyZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7O0FBRUFELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixZQUFZO0FBQzVCLE1BQUlDLEtBQUssQ0FBQ0QsT0FBTixDQUFjRSxTQUFkLENBQXdCQyxTQUE1QixFQUF1QyxPQUFPLENBQVA7QUFDdkMsTUFBSUMsY0FBYyxLQUFLQyxTQUF2QixFQUFrQyxPQUFPRCxjQUFQO0FBRWxDLE1BQUlFLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQUYsT0FBSyxDQUFDRyxTQUFOLEdBQWtCLG9CQUFsQjtBQUNBSCxPQUFLLENBQUNJLEtBQU4sQ0FBWUMsVUFBWixHQUF5QixRQUF6QjtBQUNBTCxPQUFLLENBQUNJLEtBQU4sQ0FBWUUsS0FBWixHQUFvQixPQUFwQjtBQUNBTixPQUFLLENBQUNJLEtBQU4sQ0FBWUcsUUFBWixHQUF1QixVQUF2QjtBQUNBUCxPQUFLLENBQUNJLEtBQU4sQ0FBWUksR0FBWixHQUFrQixTQUFsQjtBQUNBUCxVQUFRLENBQUNRLElBQVQsQ0FBY0MsV0FBZCxDQUEwQlYsS0FBMUI7QUFFQSxNQUFJVyxhQUFhLEdBQUdYLEtBQUssQ0FBQ1ksV0FBMUI7QUFDQVosT0FBSyxDQUFDSSxLQUFOLENBQVlTLFFBQVosR0FBdUIsUUFBdkI7QUFFQSxNQUFJQyxLQUFLLEdBQUdiLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUF2QixDQUFaO0FBQ0FZLE9BQUssQ0FBQ1YsS0FBTixDQUFZRSxLQUFaLEdBQW9CLE1BQXBCO0FBQ0FOLE9BQUssQ0FBQ1UsV0FBTixDQUFrQkksS0FBbEI7QUFFQSxNQUFJQyxlQUFlLEdBQUdELEtBQUssQ0FBQ0YsV0FBNUI7QUFDQVosT0FBSyxDQUFDZ0IsVUFBTixDQUFpQkMsV0FBakIsQ0FBNkJqQixLQUE3QjtBQUNBRixnQkFBYyxHQUFHYSxhQUFhLEdBQUdJLGVBQWpDO0FBRUEsU0FBT2pCLGNBQVA7QUFDRCxDQXhCRDs7QUEwQkEsSUFBSW9CLElBQUksR0FBR0MsbUJBQU8sQ0FBQyx1REFBRCxDQUFsQjs7QUFFQSxJQUFJeEIsS0FBSyxHQUFHeUIsc0JBQXNCLENBQUNGLElBQUQsQ0FBbEM7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUM1QixVQUFYLEdBQXdCNEIsR0FBeEIsR0FBOEI7QUFBRTNCLFdBQU8sRUFBRTJCO0FBQVgsR0FBckM7QUFBd0Q7O0FBRS9GLElBQUl2QixjQUFjLEdBQUcsS0FBSyxDQUExQjtBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtdWkvbGliL3V0aWxzL3Njcm9sbGJhci13aWR0aC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX3Z1ZTIuZGVmYXVsdC5wcm90b3R5cGUuJGlzU2VydmVyKSByZXR1cm4gMDtcbiAgaWYgKHNjcm9sbEJhcldpZHRoICE9PSB1bmRlZmluZWQpIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcblxuICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgb3V0ZXIuY2xhc3NOYW1lID0gJ2VsLXNjcm9sbGJhcl9fd3JhcCc7XG4gIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgb3V0ZXIuc3R5bGUud2lkdGggPSAnMTAwcHgnO1xuICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIG91dGVyLnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdXRlcik7XG5cbiAgdmFyIHdpZHRoTm9TY3JvbGwgPSBvdXRlci5vZmZzZXRXaWR0aDtcbiAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcblxuICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaW5uZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuICB2YXIgd2lkdGhXaXRoU2Nyb2xsID0gaW5uZXIub2Zmc2V0V2lkdGg7XG4gIG91dGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuICBzY3JvbGxCYXJXaWR0aCA9IHdpZHRoTm9TY3JvbGwgLSB3aWR0aFdpdGhTY3JvbGw7XG5cbiAgcmV0dXJuIHNjcm9sbEJhcldpZHRoO1xufTtcblxudmFyIF92dWUgPSByZXF1aXJlKCd2dWUnKTtcblxudmFyIF92dWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdnVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNjcm9sbEJhcldpZHRoID0gdm9pZCAwO1xuXG47Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/scrollbar-width.js\n");

/***/ }),

/***/ "./node_modules/element-ui/lib/utils/vue-popper.js":
/*!*********************************************************!*\
  !*** ./node_modules/element-ui/lib/utils/vue-popper.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _popup = __webpack_require__(/*! element-ui/lib/utils/popup */ \"./node_modules/element-ui/lib/utils/popup/index.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PopperJS = _vue2.default.prototype.$isServer ? function () {} : __webpack_require__(/*! ./popper */ \"./node_modules/element-ui/lib/utils/popper.js\");\n\nvar stop = function stop(e) {\n  return e.stopPropagation();\n};\n/**\n * @param {HTMLElement} [reference=$refs.reference] - The reference element used to position the popper.\n * @param {HTMLElement} [popper=$refs.popper] - The HTML element used as popper, or a configuration used to generate the popper.\n * @param {String} [placement=button] - Placement of the popper accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)\n * @param {Number} [offset=0] - Amount of pixels the popper will be shifted (can be negative).\n * @param {Boolean} [visible=false] Visibility of the popup element.\n * @param {Boolean} [visible-arrow=false] Visibility of the arrow, no style.\n */\n\n\nexports.default = {\n  props: {\n    transformOrigin: {\n      type: [Boolean, String],\n      default: true\n    },\n    placement: {\n      type: String,\n      default: 'bottom'\n    },\n    boundariesPadding: {\n      type: Number,\n      default: 5\n    },\n    reference: {},\n    popper: {},\n    offset: {\n      default: 0\n    },\n    value: Boolean,\n    visibleArrow: Boolean,\n    arrowOffset: {\n      type: Number,\n      default: 35\n    },\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    popperOptions: {\n      type: Object,\n      default: function _default() {\n        return {\n          gpuAcceleration: false\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      showPopper: false,\n      currentPlacement: ''\n    };\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler(val) {\n        this.showPopper = val;\n        this.$emit('input', val);\n      }\n    },\n    showPopper: function showPopper(val) {\n      if (this.disabled) return;\n      val ? this.updatePopper() : this.destroyPopper();\n      this.$emit('input', val);\n    }\n  },\n  methods: {\n    createPopper: function createPopper() {\n      var _this = this;\n\n      if (this.$isServer) return;\n      this.currentPlacement = this.currentPlacement || this.placement;\n\n      if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(this.currentPlacement)) {\n        return;\n      }\n\n      var options = this.popperOptions;\n      var popper = this.popperElm = this.popperElm || this.popper || this.$refs.popper;\n      var reference = this.referenceElm = this.referenceElm || this.reference || this.$refs.reference;\n\n      if (!reference && this.$slots.reference && this.$slots.reference[0]) {\n        reference = this.referenceElm = this.$slots.reference[0].elm;\n      }\n\n      if (!popper || !reference) return;\n      if (this.visibleArrow) this.appendArrow(popper);\n      if (this.appendToBody) document.body.appendChild(this.popperElm);\n\n      if (this.popperJS && this.popperJS.destroy) {\n        this.popperJS.destroy();\n      }\n\n      options.placement = this.currentPlacement;\n      options.offset = this.offset;\n      options.arrowOffset = this.arrowOffset;\n      this.popperJS = new PopperJS(reference, popper, options);\n      this.popperJS.onCreate(function (_) {\n        _this.$emit('created', _this);\n\n        _this.resetTransformOrigin();\n\n        _this.$nextTick(_this.updatePopper);\n      });\n\n      if (typeof options.onUpdate === 'function') {\n        this.popperJS.onUpdate(options.onUpdate);\n      }\n\n      this.popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();\n      this.popperElm.addEventListener('click', stop);\n    },\n    updatePopper: function updatePopper() {\n      var popperJS = this.popperJS;\n\n      if (popperJS) {\n        popperJS.update();\n\n        if (popperJS._popper) {\n          popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();\n        }\n      } else {\n        this.createPopper();\n      }\n    },\n    doDestroy: function doDestroy(forceDestroy) {\n      /* istanbul ignore if */\n      if (!this.popperJS || this.showPopper && !forceDestroy) return;\n      this.popperJS.destroy();\n      this.popperJS = null;\n    },\n    destroyPopper: function destroyPopper() {\n      if (this.popperJS) {\n        this.resetTransformOrigin();\n      }\n    },\n    resetTransformOrigin: function resetTransformOrigin() {\n      if (!this.transformOrigin) return;\n      var placementMap = {\n        top: 'bottom',\n        bottom: 'top',\n        left: 'right',\n        right: 'left'\n      };\n\n      var placement = this.popperJS._popper.getAttribute('x-placement').split('-')[0];\n\n      var origin = placementMap[placement];\n      this.popperJS._popper.style.transformOrigin = typeof this.transformOrigin === 'string' ? this.transformOrigin : ['top', 'bottom'].indexOf(placement) > -1 ? 'center ' + origin : origin + ' center';\n    },\n    appendArrow: function appendArrow(element) {\n      var hash = void 0;\n\n      if (this.appended) {\n        return;\n      }\n\n      this.appended = true;\n\n      for (var item in element.attributes) {\n        if (/^_v-/.test(element.attributes[item].name)) {\n          hash = element.attributes[item].name;\n          break;\n        }\n      }\n\n      var arrow = document.createElement('div');\n\n      if (hash) {\n        arrow.setAttribute(hash, '');\n      }\n\n      arrow.setAttribute('x-arrow', '');\n      arrow.className = 'popper__arrow';\n      element.appendChild(arrow);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.doDestroy(true);\n\n    if (this.popperElm && this.popperElm.parentNode === document.body) {\n      this.popperElm.removeEventListener('click', stop);\n      document.body.removeChild(this.popperElm);\n    }\n  },\n  // call destroy in keep-alive mode\n  deactivated: function deactivated() {\n    this.$options.beforeDestroy[0].call(this);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/utils/vue-popper.js\n");

/***/ })

}]);